{"1":{"filename":"generic.txt","code":"--@name \n--@author \n\nFlatSurfaceDynamics = true\nLift = \"lift_normal\"\n\n function Think()\n\tlocal physobj = entities.self()\n\tif !physobj:IsValid() then return end\n\t\n\tlocal curvel = physobj:GetVelocity()\n\tlocal curup = physobj:GetForward()\n\t\n\tlocal vec1 = curvel\n\tlocal vec2 = curup\n\tvec1 = vec1 - (vec1:Dot(vec2))*vec2*2\n\tlocal sped = vec1:Length()\n\t\n\tlocal finalvec = curvel\n\tlocal modf = math.abs(curup:DotProduct(curvel:GetNormalized()))\n\tlocal nvec = (curup:DotProduct(curvel:GetNormalized()))\n\t\n\tif (FlatSurfaceDynamics == 1) then\n\t\t\n\t\tif nvec > 0 then\n\t\t\tvec1 = vec1 + (curup * 10)\n\t\telse\n\t\t\tvec1 = vec1 + (curup * -10)\n\t\tend\n\t\t\n\t\tfinalvec = vec1:GetNormalized() * (math.pow(sped, modf) - 1)\n\t\tfinalvec = finalvec:GetNormalized()\n\t\tfinalvec = (finalvec * self.efficiency) + curvel\n\t\t\n\tend\n\t\n\tif (Lift != \"lift_none\") then\n\t\tif (Lift == \"lift_normal\") then\n\t\t\tlocal liftmul = 1 - math.abs(nvec)\n\t\t\tfinalvec = finalvec + (curup * liftmul * curvel:Length() * self.efficiency) / 700\n\t\telse\n\t\t\tlocal liftmul = (nvec / math.abs(nvec)) - nvec\n\t\t\tfinalvec = finalvec + (curup * curvel:Length() * self.efficiency * liftmul) / 700\n\t\tend\n\tend\n\t\n\tfinalvec = finalvec:GetNormalized()\n\tfinalvec = finalvec * curvel:Length()\n\t\n\tphysobj:SetVelocity(finalvec)\n\t\n\treturn true \n end\n\nhook.Add(\"Think\",\"HobThink\",Think())"},"2":{"code":"--@name \n--@author \n\nprint(Vector(2,2,2) * Vector(2,2,2))"},"selectedTab":2}