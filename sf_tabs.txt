{"1":{"filename":"/projects/plane/plane.txt","code":"--@name Plane\n--@author \n--@shared\n\nif SERVER then\n    \n    Throttle = 0\n    W = 0\n    A = 0\n    S = 0\n    D = 0\n    Shift = 0\n    Space = 0\n    Seat = 817\n    Driver = entities.entity(Seat):GetDriver() \n    Mass = 0\n    for K,V in pairs(entities.self():GetAllConstrainedEnts()) do\n        Mass = Mass + V:GetMass()\n    end\n    Text = \"\"\n    Offset = Vector(0,0,0)\n    function NetworkVars()\n        if net.CanSend() then\n            net.Start(\"Throttle\")\n            net.WriteDouble(Throttle)\n            if Driver:IsValid() then\n                net.WriteInt(Driver:EntIndex(),8)\n            else\n                net.WriteInt(-1,8)\n            end\n            net.WriteString(Text)\n            net.Send()\n        end\n    end\n    \n    hook.Add(\"KeyPress\",\"HobPress\",function(ply,key)\n        if ply == Driver then\n            if key == 8 then\n                W = 1\n            elseif key == 512 then\n                A = 1\n            elseif key == 16 then\n                S = 1\n            elseif key == 1024 then\n                D = 1\n            elseif key == 131072 then\n                Shift = 1\n            elseif key == 2 then\n                Space = 1\n            end\n        end\n    end)\n    hook.Add(\"KeyRelease\",\"HobRelease\",function(ply,key)\n        if ply == Driver then\n            if key == 8 then\n                W = 0\n            elseif key == 512 then\n                A = 0\n            elseif key == 16 then\n                S = 0\n            elseif key == 1024 then\n                D = 0\n            elseif key == 131072 then\n                Shift = 0\n            elseif key == 2 then\n                Space = 0\n            end\n        end\n    end)\n    \n    Holo = holograms.create(entities.self():GetPos(),Angle(0,0,0),\"models/hunter/blocks/cube025x025x025.mdl\",Vector(1,1,1))\n    Holo:SetColor(Color(255,0,0))\n    hook.Add(\"Think\",\"HobThink\",function() \n        \n        local ThrstMul = 50 * Mass\n        local PitchMul = 5 * Mass\n        local YawMul = 5 * Mass\n        local RollMul = 500 * Mass\n        \n        --internal vars\n        local Ent = entities.self():IsWeldedTo()\n        Driver = entities.entity(Seat):GetDriver() \n        Throttle = math.Clamp(Throttle + W/100 - S/100, 0 , 1)\n        if Driver:IsValid() then \n            Holo:setPos(Driver:EyePos() + Driver:EyeAngles():Forward()*500 +Offset)\n            Ang = (Driver:EyePos() - Holo:GetPos()):Angle()\n            Ang[2] = Ang[2] - Ent:GetAngles()[2]\n            Ang[2] = Ang[2] + 90\n            Ang[1] = Ang[1] - Ent:GetAngles()[3]\n            Ang:Normalize()\n            Text = \"Pitch: \" .. math.Round(Ang[1]) .. \" Yaw: \" .. math.Round(Ang[2]) .. \" Roll: \" .. (D-A)\n            Ent:ApplyAngForce(Angle(RollMul*(D-A),YawMul*Ang[2],PitchMul*Ang[1]))\n            Ent:ApplyForceCenter(-Ent:GetRight()*ThrstMul*Throttle)\n        end\n        NetworkVars()\n    end)\n    \n\n\nelse\n    Driver = nil\n    Text = \"\"\n    hook.Add(\"net\",\"HobNet\",function(Name)\n        if Name == \"Throttle\" then\n            Throttle = net.ReadDouble()\n            Driver = entities.entity(net.ReadInt(8))\n            Text = net.ReadString()\n        end\n    end)\n    Throttle = 0.5\n    hook.Add(\"HUDPaint\",\"HobPaint\",function() \n        if entities.player() == Driver then\n            local w,h = surface.ScreenW(), surface.ScreenH()\n            surface.SetDrawColor(Color(200,200,200))\n            surface.DrawRect(21,h-160,290,30)\n            surface.SetDrawColor(Color(100,100,100))\n            surface.DrawRect(23,h-158,286*Throttle,26)\n            surface.SetTextColor(Color(255,255,255))\n            surface.SetTextPos(23,h-175)\n            surface.DrawText(Text)\n        end\n    end)\nend"},"2":{"filename":"Heh.txt","code":"--@name HobScreen\n--@author\n--@shared\n \nif SERVER then\n   \n   \nelse\n    \n    --Players that can see the overview\n    Memers = {\"H08\",\"Kan\",\"Err\"}\n    function IsMemer(Ent) for I =1,#Memers do if Ent == FindPlayerByName(Memers[I]) then return true end end return false end\n        \n    if IsMemer(entities.player()) then\n        Players = find.AllPlayers()\n        LPly = entities.player()\n        TeamColours ={\n            Color(255,255,255), -- 1 ?\n            Color(255,255,255), -- 2 ?\n            Color(255,255,255), -- 3 ?\n            Color(100,255,100), -- 4 Player\n            Color(255,0,0), -- 5 Administrator\n            Color(255,255,0), -- 6 Respected Player\n            Color(255,255,255)} -- clamp\n       \n        surface.CreateFont(\"Memes\",{\n            underline = true})\n       \n        hook.Add(\"HUDPaint\",\"screenhook\",function()\n            --players\n            if(#Players > 0)then\n                for _,P in pairs(Players) do\n                    if(P ~= nil and P:IsValid()) then\n                        if P~=entities.player() then\n                            local toScrn = (P:OBBCenterW()+Vector(0,0,P:OBBSize().z/2 + 10)):ToScreen()\n                            local pos = {x=math.Clamp(toScrn.x,100,surface.ScreenW()-100),y=math.Clamp(toScrn.y,100,surface.ScreenH()-100)}\n                            if(P:Team()) then\n                                surface.SetTextColor(TeamColours[math.Clamp(P:Team(),1,7)])\n                            end\n                            surface.SetFont(\"Default\")\n                            local w,h =surface.GetTextSize(P:GetName())\n                            surface.SetTextPos(pos.x -w/2,pos.y+10)\n                            surface.DrawText(P:GetName())\n                        end\n                    end\n                end\n            end\n        end)\n       \n        timer.Create(\"refresh\",30,0,function()\n            Players = find.AllPlayers()\n        end)\n    end\nend"},"3":{"filename":"lib/sekret/octree.txt","code":"--[[\nSpace Combat Octree Builder - Created by Lt.Brandon, based on work by Steeveeo\n\nIf you're not from the diaspora development team and you're viewing this file then please go commit seppuku in the corner :)\n]]--\n\n--Global Tables\nSC.Octree = {}\nSC.Octree.Builder = {}\nSC.Octree.Octant = {}\n\n--Octant Functions\nfunction SC.Octree.Octant:New(Origin, Size, IsRoot, Parent)\n    if not Origin or not Size or ((not IsRoot) and (not Parent)) then\n        print(\"[Space Combat 2 - Octree Builder] Unable to create octant, invalid parameters\\n\")\n        return false\n    end\n\n    local obj = {}\n\tsetmetatable(obj,self)\n    obj.Parent = Parent\n    obj.Size = Size\n    obj.Position = Origin\n    obj.Children = {}\n    obj.IsRoot = IsRoot\n    obj.IsBlocked = false\n\n    if IsRoot then\n        obj.Root = obj\n        obj.OctantCount = 1\n    else\n        obj.Root = Parent.Root\n        obj.Root.OctantCount = obj.Root.OctantCount + 1\n    end\n\n    return obj\nend\n\nfunction SC.Octree.Octant:IsLeaf()\n    return #self.Children == 0\nend\n\nfunction SC.Octree.Octant:IsPointInOctant(Point)\n    local Center = self.Position\n    local Size = self.Size\n    local Min = Center - Vector(Size * 0.5, Size * 0.5, Size * 0.5)\n    local Max = Center + Vector(Size * 0.5, Size * 0.5, Size * 0.5)\n    \n    return Point:WithinAABox(Min, Max)\nend\n\nfunction SC.Octree.Octant:GetPointOctant(Point)\n    if self:IsLeaf() and self:IsPointInOctant(Point) then\n        return self\n    elseif self.Children then\n        local Octants = self.Children\n        for I = 1, 8 do\n            local SubOctant = Octants[I]\n            if SubOctant:IsPointInOctant(Point) then\n                return SubOctant:GetPointOctant(Point)\n            end\n        end\n    else\n        print(\"[Space Combat 2 - Octree Builder] - Unable to find the octant which held the point!\\n\")\n        return false\n    end\nend\n\nfunction SC.Octree.Octant:Check(CheckEntities)\n    local Size = self.Size\n    local Trace = util.TraceHull({\n\t    start = self.Position, \n\t    endpos = self.Position, \n\t    filter = player.GetAll(),\n\t    mins = Vector(self.Size * -0.5, self.Size * -0.5, self.Size * -0.5), \n\t    maxs = Vector(self.Size * 0.5, self.Size * 0.5, self.Size * 0.5),\n        mask = CheckEntities and nil or MASK_NPCWORLDSTATIC\n    })\n\n    if Trace.Hit then\n        return true\n    end\n\n    return false\nend\n\nfunction SC.Octree.Octant:Subdivide()\n    local Origin = self.Position\n    local NewScanVolume = self.Size * 0.5\n    local Dist = NewScanVolume * 0.5\n    \n    local Children = {}\n    Children[1] = SC.Octree.Octant:New(Origin + Vector(Dist, Dist, Dist), NewScanVolume, false, self)\n    Children[2] = SC.Octree.Octant:New(Origin + Vector(Dist, -Dist, Dist), NewScanVolume, false, self)\n    Children[3] = SC.Octree.Octant:New(Origin + Vector(-Dist, Dist, Dist), NewScanVolume, false, self)\n    Children[4] = SC.Octree.Octant:New(Origin + Vector(-Dist, -Dist, Dist), NewScanVolume, false, self)\n    Children[5] = SC.Octree.Octant:New(Origin + Vector(Dist, Dist, -Dist), NewScanVolume, false, self)\n    Children[6] = SC.Octree.Octant:New(Origin + Vector(Dist, -Dist, -Dist), NewScanVolume, false, self)\n    Children[7] = SC.Octree.Octant:New(Origin + Vector(-Dist, Dist, -Dist), NewScanVolume, false, self)\n    Children[8] = SC.Octree.Octant:New(Origin + Vector(-Dist, -Dist, -Dist), NewScanVolume, false, self)\n\n    self.Children = Children\nend\nSC.Octree.Octant.__index = SC.Octree.Octant\n\n--Builder Functions\nfunction SC.Octree.Builder:New(Position, Size, MaxDepth, CheckEntities, MaxQuota, FinishedCallback)\n    local obj = {}\n\tsetmetatable(obj,self)\n    obj.Position = Position\n    obj.Size = Size\n    obj.MaxDepth = MaxDepth\n    obj.CheckEntities = CheckEntities\n    obj.MaxQuota = MaxQuota\n    obj.RootOctant = SC.Octree.Octant:New(Position, Size, true)\n    obj.RootOctant:Subdivide()\n    obj.Finished = false\n    obj.CurDepth = 1\n    obj.CurParent = obj.RootOctant\n    obj.CurOctant = obj.RootOctant.Children[1]\n    obj.OctantIndex = {}\n    obj.OctantIndex[1] = 1\n    obj.FinishedCallback = FinishedCallback\n    obj.StartTime = -1\n    obj.StopTime = -1\n\n    return obj\nend\n\nlocal function quotaCheck ( n ) return ( QuotaUsed() < QuotaMax() * n ) and ( QuotaAverage() < QuotaMax() * n) end\n\nfunction SC.Octree.Builder:Rebuild(running)\n    if not running then self.StartTime = SysTime() end\n    local Finished = self.Finished\n    \n    while quotaCheck(self.MaxQuota) and not Finished do\n        --Check if this octant should be a leaf\n        if not self.CurOctant:Check(self.CheckEntities) then\n            --Iterate back up the Octree\n            while self.OctantIndex[self.CurDepth] >= 8 do\n            \n                self.CurDepth = self.CurDepth - 1\n\n                --Top of tree, break\n                if self.CurDepth < 1 then\n                    Finished = true\n                    break\n                else\n                    self.CurOctant = self.CurParent\n                    self.CurParent = self.CurOctant.Parent\n                end\n            end\n        --We found something, so subdivide\n        else\n            --We are at max depth, pop back up a level\n            if self.CurDepth >= self.MaxDepth then\n                --Mark Invalid\n                self.CurOctant.IsBlocked = true\n                \n                while self.OctantIndex[self.CurDepth] >= 8 do\n                    self.CurDepth = self.CurDepth - 1\n\n                    --Top of tree, break\n                    if self.CurDepth < 1 then\n                        Finished = true\n                        break\n                    else\n                        self.CurOctant = self.CurParent\n                        self.CurParent = self.CurOctant.Parent\n                    end\n                end\n            --Else subdivide and iterate downwards\n            else\n                self.CurOctant:Subdivide()\n                self.CurDepth = self.CurDepth + 1\n                \n                self.OctantIndex[self.CurDepth] = 0\n                self.CurParent = self.CurOctant\n            end\n        end\n                \n        --Next Octant\n        if not Finished then\n            self.OctantIndex[self.CurDepth] = self.OctantIndex[self.CurDepth] + 1\n            self.CurOctant = self.CurParent.Children[self.OctantIndex[self.CurDepth]]\n        end\n    end\n    \n    if not Finished then\n        print(\"[Space Combat 2 - Octree Builder] - Built \"..self.RootOctant.OctantCount..\" Octants\\n\")\n        timer.Simple(0.1, function()\n            if self then\n                self:Rebuild(true)\n            end\n        end)\n    else\n        self.StopTime = SysTime()\n        print(\"[Space Combat 2 - Octree Builder] - Finished Building in \" ..(self.StartTime - self.StopTime)..\".\\n\")\n        self.Finished = true\n\n        if self.FinishedCallback then\n            self:FinishedCallback()\n        end\n    end\nend\nSC.Octree.Builder.__index = SC.Octree.Builder"},"selectedTab":3}