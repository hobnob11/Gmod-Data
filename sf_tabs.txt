{"1":{"filename":"HobScreen.txt","code":"--@name HobScreen\n--@author \n--@shared\n\nme = FindPlayerByName(\"H08\")\n\nif SERVER then\n    \n    active = {}\n    \n    hook.Add(\"PlayerSay\",\"HideUtilHud\",function(ply,text)\n        local t = string.lower(text)\n        if t == \"!cam\" then\n            net.Start(\"HideUtilHud\")\n                net.WriteBool(false)\n            net.Send(me)\n            return \"\"\n        elseif t == \"!camoff\" then\n            net.Start(\"HideUtilHud\")\n                net.WriteBool(true)\n            net.Send(me)\n            return \"\"\n        end\n    end)\n    \n    function RemoveTarget(core)\n        if core and core:IsValid() then\n            active[core] = nil\n            net.Start(\"RemoveCoreTarget\")\n                net.WriteUInt(core:EntIndex(),13)\n            net.Send(me)\n        end\n    end\n\n    function UpdateTargets()\n        local keys = table.GetKeys(active)\n        for i=#keys,1,-1 do\n            if not keys[i]:IsValid() then table.remove(active,keys[i]) end\n        end\n        for core,_ in pairs(active) do\n            net.Start(\"UpdateCoreTarget\")\n                net.WriteUInt(core:EntIndex(), 13)\n                net.WriteUInt(core:GetShieldAmount(), 32)\n                net.WriteUInt(core:GetShieldMax(), 32)\n                net.WriteUInt(core:GetArmorAmount(), 32)\n                net.WriteUInt(core:GetArmorMax(), 32)\n                net.WriteUInt(core:GetHullAmount(), 32)\n                net.WriteUInt(core:GetHullMax(), 32)\n            net.Send(me)\n        end\n    end\n    \n    function CheckAim() \n        local aiment = me:GetEyeTrace().Entity\n        if aiment and aiment:IsValid() then\n            local core = aiment:GetCoreEntity()\n            if core and core:IsValid() then\n                if not active[core] then\n                    active[core] = core\n                    net.Start(\"NewCoreTarget\")\n                        net.WriteUInt(core:EntIndex(), 13)\n                        net.WriteString(core:GetShipClass())\n                        net.WriteString(core:GetShipName())\n                        net.WriteUInt(core:GetShieldAmount(), 32)\n                        net.WriteUInt(core:GetShieldMax(), 32)\n                        net.WriteUInt(core:GetArmorAmount(), 32)\n                        net.WriteUInt(core:GetArmorMax(), 32)\n                        net.WriteUInt(core:GetHullAmount(), 32)\n                        net.WriteUInt(core:GetHullMax(), 32)\n                    net.Send(me)\n                end\n                timer.Create(\"remove\"..core:EntIndex(),3,1,function() RemoveTarget(core) end)\n            end\n        end\n    end\n    \n    timer.Create(\"scan\",0.3,0,CheckAim)\n    timer.Create(\"update\",1,0,UpdateTargets)\n    \nelse\n    if entities.player() == me then\n        Players = find.AllPlayers()\n        LPly = entities.player()\n        active = true\n        cores = {}\n        \n        TeamColours ={\n            Color(100,255,255), -- 1 ?\n            Color(255,100,255), -- 2 ? \n            Color(255,255,100), -- 3 ?\n            Color(100,255,100), -- 4 Player\n            Color(255,0,0),     -- 5 Administrator\n            Color(255,255,0),   -- 6 Respected Player\n            Color(255,255,255)} -- clamp\n        \n        \n        function DrawWedge(px,py,w,h,angle,size,col)\n        \tlocal vertices = {}\n        \tlocal fidelity = 180\n        \n        \tvertices[1] = { x = px, y = py, u = px, v = py }\n        \tlocal ang = -math.rad(angle)\n        \tlocal c = math.cos(ang)\n        \tlocal s = math.sin(ang)\n        \tfor ii=0,fidelity do\n        \t\tlocal i = ii*(size)/fidelity\n        \t\tlocal radd = math.rad(i)\n        \t\tlocal x = math.cos(radd)\n        \t\tlocal u = (x+1)/2\n        \t\tlocal y = math.sin(radd)\n        \t\tlocal v = (y+1)/2\n        \n        \t\t--radd = -rad(angle)\n        \t\tlocal tempx = x * w * c - y * h * s + x\n        \t\ty = x * w * s + y * h * c + y\n        \t\tx = tempx\n        \n        \t\tvertices[ii+2] = { x = x+px, y = y+py, u = u + px, v = v + py }\n        \tend\n        \n        \tsurface.SetDrawColor( col )\n        \tif (vertices and #vertices>0) then\n        \t\tsurface.DrawPoly( vertices )\n        \tend\n        end\n        hook.Add(\"HUDPaint\",\"UtilHud\",function()\n            --players\n            if LPly:IsValid() and LPly:Alive() and LPly:GetActiveWeapon()~=\"weapon_stunstick\" and active then\n                if #Players > 0 then\n                    for _,P in pairs(Players) do\n                        if P ~= nil and P:IsValid() then\n                            if P~=LPly then\n                                local vec = (P:OBBCenterW()+Vector(0,0,P:OBBSize().z/2 + 10))\n                                local dist = vec:Distance(LPly:EyePos())\n                                local toScrn = (vec + Vector(0,0,dist*0.02)):ToScreen()\n                                local pos = {x=math.Clamp(toScrn.x,100,surface.ScreenW()-100),y=math.Clamp(toScrn.y,100,surface.ScreenH()-100)}\n                                if(P:Team()) then\n                                    surface.SetTextColor(TeamColours[math.Clamp(P:Team(),1,7)])\n                                end\n                                surface.SetFont(\"Default\")\n                                local w,h =surface.GetTextSize(P:GetName())\n                                surface.SetTextPos(pos.x -w/2,pos.y+10)\n                                surface.DrawText(P:GetName())\n                            end\n                        end\n                    end\n                end\n                if #cores then\n                    local keys = table.GetKeys(cores)\n                    for i=#keys,1,-1 do\n                        if not keys[i]:IsValid() then table.remove(cores,keys[i]) end\n                    end\n                    for c,t in pairs(cores) do\n                        local vec = c:LocalToWorld(c:OBBCenter())\n                        local toScrn = vec:ToScreen()\n                        local pos = {x=math.Clamp(toScrn.x,100,surface.ScreenW()-100),y=math.Clamp(toScrn.y,100,surface.ScreenH()-100)}\n\n                        local HPMax = t.shieldmax + t.armormax + t.hullmax\n                        local HuAng = (t.hull / HPMax)*360\n                        local ArAng = (t.armor / HPMax)*360\n                        local ShAng = (t.shield / HPMax)*360\n                        DrawWedge(pos.x,pos.y,40,40,90,-HuAng,Color(255,0,0,255))\n                        DrawWedge(pos.x,pos.y,40,40,90+HuAng,-ArAng,Color(155,155,155,255))\n                        DrawWedge(pos.x,pos.y,40,40,90+HuAng+ArAng,-ShAng,Color(0,0,255,255))\n                        surface.DrawCircle(pos.x,pos.y,40,Color(55,55,55,255))\n                        surface.SetDrawColor(Color(55,55,55,255))\n                        surface.SetTextColor(Color(255,255,255,255))\n                        surface.SetTextPos(pos.x+34,pos.y-40)\n                        surface.DrawText(t.class)\n                        surface.SetTextPos(pos.x+42,pos.y-25)\n                        surface.DrawText(t.name)\n                    end\n                end\n            end\n            -- hook.Remove(\"HUDPaint\",\"UtilHud\")\n        end)\n        \n        timer.Create(\"refresh\",15,0,function() \n            Players = find.AllPlayers()\n        end)\n        \n        hook.Add(\"net\", \"HideUtilHud\", function(name, len, ply)\n            if name == \"HideUtilHud\" then\n                active = net.ReadBool()\n            elseif name == \"NewCoreTarget\" then\n                local core = Entity(net.ReadUInt(13))\n                cores[core] = {\n                        class=net.ReadString(),\n                        name=net.ReadString(),\n                        shield=net.ReadInt(32),\n                        shieldmax=net.ReadInt(32),\n                        armor=net.ReadInt(32),\n                        armormax=net.ReadInt(32),\n                        hull=net.ReadInt(32),\n                        hullmax=net.ReadInt(32)\n                    }\n            elseif name == \"UpdateCoreTarget\" then\n                local core = Entity(net.ReadUInt(13))\n                cores[core].shield=net.ReadInt(32)\n                cores[core].shieldmax=net.ReadInt(32)\n                cores[core].armor=net.ReadInt(32)\n                cores[core].armormax=net.ReadInt(32)\n                cores[core].hull=net.ReadInt(32)\n                cores[core].hullmax=net.ReadInt(32)\n            elseif name == \"RemoveCoreTarget\" then\n                local core = Entity(net.ReadUInt(13))\n                cores[core] = nil\n            end\n        end)\n    end\nend"},"2":{"filename":"Hob Screen 3.txt","code":"--@name Hob Screen 3\n--@author \n--@shared\n\nif SERVER then\n    hook.Add(\"Think\",\"Think\",function()\n        if not net.CanSend() then return end\n        \n        local Tbl = {}\n        for k,v in pairs(find.ByClass(\"ship_core\")) do\n            Tbl[v] = {\n                shield = v:GetShieldAmount(),\n                shieldmax = v:GetShieldMax(),\n                armour = v:GetArmorAmount(),\n                armourmax = v:GetArmorMax(),\n                hull = v:GetHullAmount(),\n                hullmax = v:GetHullMax(),\n                name = v:GetShipName(),\n                class = v:GetShipClass()\n            }\n        end\n        net.Start(\"Update Core Table\")\n        net.WriteTable(Tbl)\n        net.Send()\n    end)\nelse\n    if entities.player() == entities.owner() then\n        ShipCores = {}\n        hook.Add(\"net\",\"HobNetMessage\",function(name,len)\n            if not name == \"Update Core Table\" then return end\n            ShipCores = {}\n            ShipCores = net.ReadTable()\n        end)\n        \n        function DrawWedge(px,py,w,h,angle,size,col,uvenum) --1= right to left, 2 = from center outwards\n        \tlocal vertices = {}\n        \tlocal fidelity = 180\n        \n        \tvertices[1] = { x = px, y = py, u = px, v = py }\n        \tlocal ang = -math.rad(angle)\n        \tlocal c = math.cos(ang)\n        \tlocal s = math.sin(ang)\n        \tfor ii=0,fidelity do\n        \t\tlocal i = ii*(size)/fidelity\n        \t\tlocal radd = math.rad(i)\n        \t\tlocal x = math.cos(radd)\n        \t\tlocal y = math.sin(radd)\n            \tlocal u = 0\n            \tlocal v = 0\n        \t\tif not uvenum or uvenum == 1 then \n            \t\tu = (x+1)/2\n            \t\tv = (y+1)/2\n            \telseif uvenum == 2 then\n            \t    u = 0\n            \t    v = 1\n            \tend\n        \n        \t\t--radd = -rad(angle)\n        \t\tlocal tempx = x * w * c - y * h * s + x\n        \t\ty = x * w * s + y * h * c + y\n        \t\tx = tempx\n        \n        \t\tvertices[ii+2] = { x = x+px, y = y+py, u = u + px, v = v + py }\n        \tend\n            surface.SetDrawColor( col )\n    \t    if (vertices and #vertices>0) then\n    \t\t    surface.DrawPoly( vertices )\n    \t    end\n        end\n        function DrawWedge2(px,py,w,h,w2,h2,angle,size,col,uvenum) --1= right to left, 2 = from center outwards\n        \tlocal vertices = {}\n        \tlocal fidelity = 180\n        \t\n            -- dont want a vertex in the middle of the circle to make a C shape\n        \t--vertices[1] = { x = px, y = py, u = px, v = py }\n        \tlocal ang = -math.rad(angle)\n        \tlocal c = math.cos(ang)\n        \tlocal s = math.sin(ang)\n        \tfor ii=0,fidelity do\n        \t\tlocal i = ii*(size)/fidelity\n        \t\tlocal radd = math.rad(i)\n        \t\tlocal x = math.cos(radd)\n        \t\tlocal y = math.sin(radd)\n            \tlocal u = 0\n            \tlocal v = 0\n        \t\tif not uvenum or uvenum == 1 then \n            \t\tu = (x+1)/2\n            \t\tv = (y+1)/2\n            \telseif uvenum == 2 then\n            \t    u = 0\n            \t    v = 1\n            \tend\n        \n        \t\t--radd = -rad(angle)\n        \t\tlocal tempx = x * w * c - y * h * s + x\n        \t\ty = x * w * s + y * h * c + y\n        \t\tx = tempx\n        \n        \t\tvertices[ii] = { x = x+px, y = y+py, u = u + px, v = v + py }\n        \tend\n        \tlocal vertices2 = {}\n        \t\n        \tlocal ang = math.rad(angle)\n        \tlocal c = math.cos(ang)\n        \tlocal s = math.sin(ang)\n        \tfor ii=0,fidelity do\n        \t\tlocal i = ii*(size)/fidelity\n        \t\tlocal radd = math.rad(i)\n        \t\tlocal x = math.cos(radd)\n        \t\tlocal y = math.sin(radd)\n            \tlocal u = 0\n            \tlocal v = 0\n        \t\tif not uvenum or uvenum == 1 then \n            \t\tu = (x+1)/2\n            \t\tv = (y+1)/2\n            \telseif uvenum == 2 then\n            \t    u = 0\n            \t    v = 1\n            \tend\n        \n        \t\t--radd = -rad(angle)\n        \t\tlocal tempx = x * w2 * c - y * h2 * s + x\n        \t\ty = x * w2 * s + y * h2 * c + y\n        \t\tx = tempx\n        \n        \t\tvertices2[ii] = { x = x+px, y = y+py, u = u + px, v = v + py }\n        \tend\n        \t\n        \ttable.Add(vertices,vertices2)\n            surface.SetDrawColor( col )\n    \t    if (vertices and #vertices>0) then\n    \t\t    surface.DrawPoly( vertices )\n    \t    end\n        end\n    \n        Gradient = Material(\"gui/gradient\",\"noclamp\")\n        hook.Add(\"HUDPaint\",\"HobHud\",function()\n            local Pos = {x=surface.ScreenW()/2, y=surface.ScreenH()-250}\n            --[[\n            surface.SetMaterial(Gradient)\n            DrawWedge(Pos.x,Pos.y,132,132,0,180,Color(0,0,0),2)\n            DrawWedge(Pos.x,Pos.y,130,130,0,180,Color(255,255,255),1)\n            surface.SetTexture(0)\n            DrawWedge(Pos.x,Pos.y,129,129,0,180,Color(0,0,0))\n            --]]\n            DrawWedge2(Pos.x,Pos.y,130,130,100,100,180,180,Color(255,255,255))\n        end)\n    end\nend"},"3":{"filename":"Hob Screen 2.txt","code":"--@name Hob Screen 2\n--@author \n--@shared\n\nif SERVER then\n    hook.Add(\"Think\",\"Think\",function()\n        if not net.CanSend() then return end\n        \n        local Tbl = {}\n        for k,v in pairs(find.ByClass(\"ship_core\")) do\n            Tbl[v] = {\n                shield = v:GetShieldAmount(),\n                shieldmax = v:GetShieldMax(),\n                armour = v:GetArmorAmount(),\n                armourmax = v:GetArmorMax(),\n                hull = v:GetHullAmount(),\n                hullmax = v:GetHullMax(),\n                name = v:GetShipName(),\n                class = v:GetShipClass()\n            }\n        end\n        net.Start(\"Update Core Table\")\n        net.WriteTable(Tbl)\n        net.Send()\n    end)\nelse\n    if entities.player() == entities.owner() then\n        ShipCores = {}\n        hook.Add(\"net\",\"HobNetMessage\",function(name,len)\n            if not name == \"Update Core Table\" then return end\n            ShipCores = {}\n            ShipCores = net.ReadTable()\n        end)\n        \n        function DrawWedge(px,py,w,h,angle,size,col)\n        \tlocal vertices = {}\n        \tlocal fidelity = 180\n        \n        \tvertices[1] = { x = px, y = py, u = px, v = py }\n        \tlocal ang = -math.rad(angle)\n        \tlocal c = math.cos(ang)\n        \tlocal s = math.sin(ang)\n        \tfor ii=0,fidelity do\n        \t\tlocal i = ii*(size)/fidelity\n        \t\tlocal radd = math.rad(i)\n        \t\tlocal x = math.cos(radd)\n        \t\tlocal u = (x+1)/2\n        \t\tlocal y = math.sin(radd)\n        \t\tlocal v = (y+1)/2\n        \n        \t\t--radd = -rad(angle)\n        \t\tlocal tempx = x * w * c - y * h * s + x\n        \t\ty = x * w * s + y * h * c + y\n        \t\tx = tempx\n        \n        \t\tvertices[ii+2] = { x = x+px, y = y+py, u = u + px, v = v + py }\n        \tend\n            surface.SetDrawColor( col )\n    \t    if (vertices and #vertices>0) then\n    \t\t    surface.DrawPoly( vertices )\n    \t    end\n        end\n        \n        \n        hook.Add(\"HUDPaint\",\"HobHud\",function()\n            for c,t in pairs( ShipCores ) do\n                if not c:IsValid() then continue end\n                local vec = c:LocalToWorld(c:OBBCenter())\n                local toScrn = vec:ToScreen()\n                local pos = {x=math.Clamp(toScrn.x,100,surface.ScreenW()-100),y=math.Clamp(toScrn.y,100,surface.ScreenH()-100)}\n                local HPMax = t.shieldmax + t.armourmax + t.hullmax\n                local HuAng = (t.hull / HPMax)*360\n                local ArAng = (t.armour / HPMax)*360\n                local ShAng = (t.shield / HPMax)*360\n                \n                DrawWedge(pos.x,pos.y,40,40,90,-HuAng,Color(255,0,0,255))\n                DrawWedge(pos.x,pos.y,40,40,90+HuAng,-ArAng,Color(155,155,155,255))\n                DrawWedge(pos.x,pos.y,40,40,90+HuAng+ArAng,-ShAng,Color(0,0,255,255))\n                surface.DrawCircle(pos.x,pos.y,40,Color(55,55,55,255))\n                surface.SetDrawColor(Color(55,55,55,255))\n                surface.SetTextColor(Color(255,255,255,255))\n                surface.SetTextPos(pos.x, pos.y + 120 )\n                surface.DrawText(t.class)\n                surface.SetTextPos(pos.x, pos.y + 120 )\n                surface.DrawText(t.class)\n            end\n        end)\n    end\nend"},"selectedTab":3}