@name WingSpawner
@inputs Y
@outputs 
@persist X X2 Count String:string
@trigger 
String="models/hunter/blocks/cube05x8x025.mdl"
if(first())
{
    
    function angleSection(I,Base)
    {
        holoCreate(I,holoEntity(Base):pos(),vec(1,1,1),holoEntity(Base):angles(),vec(255,255,255),String)
        holoCreate(I+1,holoEntity(I):toWorld(vec(0,holoEntity(I):boxSize():y()/2,holoEntity(I):boxSize():z()/2)),vec(2,0.2,0.2))
        holoCreate(I+2,holoEntity(I):toWorld(vec(0,-holoEntity(I):boxSize():y()/2,holoEntity(I):boxSize():z()/2)),vec(2,0.2,0.2))
        holoParent(I,I+1)
        holoParent(I+2,I)
        
        holoCreate(I+3,holoEntity(Base):pos(),vec(1,1,1),holoEntity(Base):angles(),vec(255,255,255),String)
        holoCreate(I+4,holoEntity(I+3):toWorld(vec(0,holoEntity(I+3):boxSize():y()/2,holoEntity(I+3):boxSize():z()/2)),vec(2,0.2,0.2))
        holoCreate(I+5,holoEntity(I+3):toWorld(vec(0,-holoEntity(I+3):boxSize():y()/2,holoEntity(I+3):boxSize():z()/2)),vec(2,0.2,0.2))
        holoParent(I+3,I+4)
        holoParent(I+5,I+3)
        Count=Count+6
         if (!holoCanCreate()) {print("OH NOES")}

    }
    function moveAngleSec(I,Base,Inv)
    {
        holoPos(I+1,holoEntity(Base):pos())
        holoAng(I+1,holoEntity(Base):toWorld(ang(0,180*Inv,-45)))
        holoParent(I+1,Base)
        holoPos(I+4,holoEntity(I+2):pos())
        holoParent(I+4,I+2)
         if (!holoCanCreate()) {print("OH NOES")}

    }
    function strightSection(I,Base)
    {
        holoCreate(I,holoEntity(Base):pos(),vec(1,1,1),holoEntity(Base):angles(),vec(255,255,255),String)
        holoCreate(I+1,holoEntity(I):toWorld(vec(0,holoEntity(I):boxSize():y()/2,holoEntity(I):boxSize():z()/2)),vec(2,0.2,0.2))
        holoCreate(I+2,holoEntity(I):toWorld(vec(0,-holoEntity(I):boxSize():y()/2,holoEntity(I):boxSize():z()/2)),vec(2,0.2,0.2))
        holoParent(I,I+1)
        holoParent(I+2,I)
    
        holoCreate(I+3,holoEntity(Base):pos(),vec(1,1,1),holoEntity(Base):angles(),vec(255,255,255),String)
        holoCreate(I+4,holoEntity(I+3):toWorld(vec(0,holoEntity(I+3):boxSize():y()/2,holoEntity(I+3):boxSize():z()/2)),vec(2,0.2,0.2))
        holoCreate(I+5,holoEntity(I+3):toWorld(vec(0,-holoEntity(I+3):boxSize():y()/2,holoEntity(I+3):boxSize():z()/2)),vec(2,0.2,0.2))
        holoParent(I+3,I+4)
        holoParent(I+5,I+3)
        Count=Count+6
         if (!holoCanCreate()) {print("OH NOES")}

    }
    function moveStrightSec(I,Base,Inv)
    {
        holoPos(I+1,holoEntity(Base):pos())
        holoAng(I+1,holoEntity(Base):toWorld(ang(0,180*Inv,0)))
        holoParent(I+1,Base)
        holoPos(I+4,holoEntity(I+2):pos())
        holoAng(I+4,holoEntity(I+2):toWorld(ang(0,180*Inv,0)))
        holoParent(I+4,I+2)
         if (!holoCanCreate()) {print("OH NOES")}

    }
    function updateAngleSec(I,Inv)
    {
        holoAng(I+1,holoEntity(1):toWorld(ang(0,180*Inv,X2)))
        holoAng(I+4,holoEntity(1):toWorld(ang(0,180*Inv,-X)))
         if (!holoCanCreate()) {print("OH NOES")}

    }
    function updateStrightSec(I,Inv)
    {
        holoAng(I+1,holoEntity(1):toWorld(ang(0,180*Inv,X)))
        holoAng(I+4,holoEntity(1):toWorld(ang(0,180*Inv,-X)))
         if (!holoCanCreate()) {print("OH NOES")}

    }
    function clampMath()
    {
        local Z = X
        local Z2 = X2
        if(Y)
        {
            X = clamp( Z - 4 , -90 , 0)
            X2= clamp( Z2- 2 , -90 , -45)
        }
        else
        {
            X = clamp( Z + 4 , -90 , 0)
            X2= clamp( Z2+ 2 , -90 , -45)        
        }
    }    
    function main()
    {
        for(I=1,4)
        {
            #createAng
            updateAngleSec(I*100,0)
            for(J=1,I)
            {
                #createStright
                updateStrightSec(I*100+J*10 ,0)
            }
        }
        timer("math",50)
    }

    holoCreate(1,entity():pos()+vec(0,0,50))
    holoParent(1,entity())
    
    #create left wing
    for(I=1,4)
    {
        #createAng
        if(I==1){ angleSection(I*100,1) } else { angleSection(I*100,(I-1)*100+2) }
        for(J=1,I)
        {
            #createStright
            if(J==1){ strightSection(I*100+J*10 , I*100+5 ) } else { strightSection(I*100+J*10 , I*100+(J-1)*10 +5) }
        }
    }  
    
    timer("move",100)
    timer("gotoHob",1000)
    print(Count)
}
if(clk("move"))
{
    for(I=1,4)
    {
        #createAng
        if(I==1){ moveAngleSec(I*100,1,0) } else { moveAngleSec(I*100,(I-1)*100+2,0) }
        for(J=1,I)
        {
            #createStright
            if(J==1){ moveStrightSec(I*100+J*10 , I*100+5 ,0) } else { moveStrightSec(I*100+J*10 , I*100+(J-1)*10 + 5,0) }
        }
    }

}

if(clk("gotoHob"))
{
#    holoPos(1,owner():attachmentPos("chest"))
#    holoAng(1,owner():attachmentAng("chest"))
#    holoPos(1,holoEntity(1):toWorld(vec(-20,0,0)))
#    holoParentAttachment(1,owner(),"chest")
    timer("main",1000)
}

if(clk("math"))
{
    clampMath()
    timer("main",50)
}
if(clk("main"))
{
    main()
}
if(last())
{
    
}
