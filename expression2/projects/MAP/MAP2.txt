@name MAP2
@inputs 
@outputs Array:array String:string ASDF:vector Count Test:array
@persist Asteroids:array AsteroidsCount ShipCores:array PlanetSkins:array
@trigger 

if(first()){
    
    if(map()=="sb_omen_v2"){
        #Phobos
        holoCreate(5,entity():pos(),vec(0.01,0.01,0.01))
        holoModel(5,"Models/planets/phobos.mdl")
        holoAng(5,entity(419):angles())
       #Deimos
        holoCreate(6,entity():pos(),vec(0.01,0.01,0.01))
        holoModel(6,"Models/planets/deimos.mdl")
        holoAng(6,entity(423):angles())
    }
    if(map()=="sb_gooniverse"){
        PlanetSkins[1,string]="models/hiigara/hiigara.mdl"
        PlanetSkins[2,string]="models/Demeter/Demeter.mdl"
        PlanetSkins[3,string]="models/cerebus/cerebus.mdl"
        PlanetSkins[4,string]="models/coruscant/coruscant.mdl"
        PlanetSkins[5,string]="models/kobol/kobol.mdl"
        PlanetSkins[6,string]="models/Endgame/Endgame.mdl"
    }
    
    findByClass("infinity_planet")
    Array=findToArray()
    for(I=1,Array:count()){
        if(map()=="sb_gooniverse"){
            holoCreate(I+100,entity():pos()+(Array[I,entity]:pos())/100+vec(0,0,80),Array[I,entity]:boxSize()/(I>=4 ? ( I==4 ? -200000 : -500000 ) : I==2 ? -650000 : -800000))
        }else{
            holoCreate(I+100,entity():pos()+(Array[I,entity]:pos())/100+vec(0,0,80),Array[I,entity]:boxSize()/-800000)
        }            
        holoModel(I+100,PlanetSkins[I,string])
        holoAlpha(I+100,255)
        holoParent(I+100,entity())
        holoCreate(I+200,entity():pos()+(Array[I,entity]:pos())/100+vec(0,0,80),vec(Array[I,entity]:boxSize():x()/1100,Array[I,entity]:boxSize():y()/1100,0.1))
        holoModel(I+200,"hqcylinder")
        holoColor(I+200,vec4(255,255,255,255))
        holoMaterial(I+200,"models/rendertarget")
        holoParent(I+200,entity())
    }
    for(I=1,Array:count()){
        Array[I,vector]=Array[I,entity]:boxSize()
    }
    #asteroids
    function void asteroids(){
        for(I=AsteroidsCount*100,(AsteroidsCount+1)*100){
            holoCreate(1000+I,entity():pos()+(Asteroids[I,entity]:pos()/100)+vec(0,0,80),vec(0.01,0.01,0.01))
            holoAng(1000+I,Asteroids[I,entity]:angles())
            holoModel(1000+I,Asteroids[I,entity]:model())
            holoParent(1000+I,entity())
        }
        AsteroidsCount++
    }
    findExcludePlayerProps(findPlayerByName("s"))
    findByClass("prop_physics")
    print(findToArray():count())
    for(I=1,findToArray():count()){
        Asteroids=findToArray()
        AsteroidsCount=0
        timer(100,ceil(Asteroids:count()/100),"Asteroids","asteroids()")
    }
       
    function void movement(){

        for(I=1,Asteroids:count()){
            holoPos(I+1000,entity():pos()+(Asteroids[I,entity]:pos()/100)+vec(0,0,80))
            holoAng(I+1000,Asteroids[I,entity]:angles())
        }
    }
    timer(500,0,"Movement","movement()")
}
