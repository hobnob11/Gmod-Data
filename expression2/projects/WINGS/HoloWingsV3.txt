@name HoloWingsV3
@persist Mod A45 X Props:array LOL

if(first())
{
    holoCreate(1)
    holoPos(1,entity():isWeldedTo():pos())
    holoAng(1,ang(0,0,0))
    entity():isWeldedTo():parentTo(holoEntity(1))
    entity():parentTo(holoEntity(1))
    local  Long = "models/hunter/blocks/cube05x8x025.mdl"
    local Short = "models/hunter/blocks/cube05x3x025.mdl"
##########################  LEFT  WING  ###########################################
    for(I=1,5)
    {
        #Angle Sections
        holoCreate(I*2)
        holoModel(I*2,Short)
        if(I==1)
        {
            holoParent(I*2,holoEntity(1))
        }else{
            holoParent(I*2,I*2-2)
        }
        holoCreate(I*2+1)
        holoModel(I*2+1,Long)
        holoParent(I*2+1,I*2)
        
        #Stright Sections
        for(J=1,I)
        {
            holoCreate(I*10+J*2)
            holoModel(I*10+J*2,Long)
            if(J==1)
            {
                holoParent(I*10+J*2,I*2+1)
            }else{
                holoParent(I*10+J*2,I*10+J*2-1)
            }
            holoCreate(I*10+J*2+1)
            holoModel(I*10+J*2+1,Long)
            holoParent(I*10+J*2+1,I*10+J*2)
        }
        
    }
##########################  RIGHT  WING  ##########################################
    for(I=1,5)
    {
        #Angle Sections
        holoCreate(I*2+50)
        holoModel(I*2+50,Short)
        if(I==1)
        {
            holoParent(I*2+50,holoEntity(1))
        }else{
            holoParent(I*2+50,I*2-2+50)
        }
        holoCreate(I*2+1+50)
        holoModel(I*2+1+50,Long)
        holoParent(I*2+1+50,I*2+50)
        
        #Stright Sections
        for(J=1,I)
        {
            holoCreate(I*10+J*2+50)
            holoModel(I*10+J*2+50,Long)
            if(J==1)
            {
                holoParent(I*10+J*2+50,I*2+1+50)
            }else{
                holoParent(I*10+J*2+50,I*10+J*2-1+50)
            }
            holoCreate(I*10+J*2+1+50)
            holoModel(I*10+J*2+1+50,Long)
            holoParent(I*10+J*2+1+50,I*10+J*2)
        }
        
    }
#######################  LEFT  TAIL  ###################################################
    for(I=1,2)
    {
        #Angle Sections
        holoCreate(I*2+100)
        holoModel(I*2+100,Short)
        if(I==1)
        {
            holoParent(I*2+100,2)
        }else{
            holoParent(I*2+100,I*2-2+100)
        }
        holoCreate(I*2+1+100)
        holoModel(I*2+1+100,Long)
        holoParent(I*2+1+100,I*2+100)
        
        #Stright Sections
        for(J=1,I)
        {
            holoCreate(I*10+J*2+100)
            holoModel(I*10+J*2+100,Long)
            if(J==1)
            {
                holoParent(I*10+J*2+100,I*2+1+100)
            }else{
                holoParent(I*10+J*2+100,I*10+J*2-2+100)
            }
        }
        
    }
###################### RIGHT TAIL #############################################################
    for(I=1,2)
    {
        #Angle Sections
        holoCreate(I*2+150)
        holoModel(I*2+150,Short)
        if(I==1)
        {
            holoParent(I*2+150,52)
        }else{
            holoParent(I*2+150,I*2-2+150)
        }
        holoCreate(I*2+1+150)
        holoModel(I*2+1+150,Long)
        holoParent(I*2+1+150,I*2+150)
        
        #Stright Sections
        for(J=1,I)
        {
            holoCreate(I*10+J*2+150)
            holoModel(I*10+J*2+150,Long)
            if(J==1)
            {
                holoParent(I*10+J*2+150,I*2+1+150)
            }else{
                holoParent(I*10+J*2+150,I*10+J*2-2+150)
            }
        }
        
    }
    function holoOffset(Idx,Parent:entity,Angle:angle)
    {
        local Ent = holoEntity(Idx)
        local BoxSize1 = vec(0,Ent:boxSize():y()/2,-Ent:boxSize():z()/2)
        local BoxSize2 = vec(0,Parent:boxSize():y()/2,Parent:boxSize():z()/2)
        
        holoPos(Idx,Parent:toWorld(BoxSize2 + BoxSize1:rotate(Angle)))
        holoAng(Idx,Parent:toWorld(Angle))
    }
    function holoOffset(Idx,ParentIdx,Angle:angle)
    {
        holoOffset(Idx,holoEntity(ParentIdx),Angle)
    }
    
    function move()
    {
        local A = A45
        A45 = clamp(A+Mod,0,45)
        ######################### Left Wing ######################
        for(I=1,5)
        {
            if(I==1)
            {
                holoOffset(I*2,holoEntity(1),ang(0,0,45+A45))
            }else{
                holoOffset(I*2,I*2-2,ang(0,0,0))
            }
            holoOffset(I*2+1,I*2,ang(0,0,-45-A45*3))
            
                    #Stright Sections
            for(J=1,I)
            {
                if(J==1)
                {
                    holoOffset(I*10+J*2,I*2+1,ang(0,0,A45*4))
                }else{
                    holoOffset(I*10+J*2,I*10+J*2-1,ang(0,0,A45*4))
                }
                holoOffset(I*10+J*2+1,I*10+J*2,ang(0,0,-A45*4))
            }
        
        }
        ########################## Right Wing #######################
        for(I=1,5)
        {
            if(I==1)
            {
                holoOffset(I*2+50,holoEntity(1),ang(0,180,45+A45))
            }else{
                holoOffset(I*2+50,I*2-2+50,ang(0,0,0))
            }
            holoOffset(I*2+1+50,I*2+50,ang(0,0,-45-A45*3))
                    #Stright Sections
            for(J=1,I)
            {
                if(J==1)
                {
                    holoOffset(I*10+J*2+50,I*2+1+50,ang(0,0,A45*4))
                }else{
                    holoOffset(I*10+J*2+50,I*10+J*2-1+50,ang(0,0,A45*4))
                }
                holoOffset(I*10+J*2+1+50,I*10+J*2+50,ang(0,0,-A45*4))
            }
        
        }
        ####################### Left Tail ###########################
        for(I=1,2)
        {
            if(I==1)
            {
                holoOffset(I*2+100,2,ang(45+A45,90-A45,45))
            }else{
                holoOffset(I*2+100,I*2-2+100,ang(0,0,0))
            }
            holoOffset(I*2+1+100,I*2+100,ang(0,0,-45-A45*3))
                    #Stright Sections
            for(J=1,I)
            {
                if(J==1)
                {
                    holoOffset(I*10+J*2+100,I*2+1+100,ang(0,0,A45*4))
                }else{
                    holoOffset(I*10+J*2+100,I*10+J*2-2+100,ang(0,0,-A45*4))
                }
            }
        
        }
        ################### Right Tail ######################################
        for(I=1,2)
        {
            if(I==1)
            {
                holoOffset(I*2+150,52,ang(-45-A45,-90+A45,45))
            }else{
                holoOffset(I*2+150,I*2-2+150,ang(0,0,0))
            }
            holoOffset(I*2+1+150,I*2+150,ang(0,0,-45-A45*3))
                    #Stright Sections
            for(J=1,I)
            {
                if(J==1)
                {
                    holoOffset(I*10+J*2+150,I*2+1+150,ang(0,0,A45*4))
                }else{
                    holoOffset(I*10+J*2+150,I*10+J*2-2+150,ang(0,0,-A45*4))
                }
            }
        
        }

        if(A45==0|A45==45){}else
        {
            timer(100,1,"move","move()")
        }
    }
    function move2()
    {
        local A = A45
        A45 = clamp(A+Mod,0,45)
        
        holoOffset(102,2,ang(45-A45,90-A45*2,45-A45) )

        holoOffset(152,52,ang(-45+A45,-90+A45*2,45-A45) )
        if(A45==0|A45==45){}else
        {
            timer(100,1,"move2","move2()")
        }
    }
    function mat()
    {
        X++
        if(holoEntity(X):isValid())
        {
            Props[X,entity]=propSpawn(holoEntity(X):model(),holoEntity(X):pos(),holoEntity(X):angles(),1)
            holoAlpha(X,0)
            Props[X,entity]:parentTo(holoEntity(X))
            Props[X,entity]:weld(entity():isWeldedTo())
        }
    }
    function toMe()
    {
        Target=owner()
        holoPos(1,Target:attachmentPos("chest"))
        holoAng(1,Target:attachmentAng("chest"))
        holoParentAttachment(1,Target,"chest")
        holoPos(1,holoEntity(1):toWorld(vec(-20,0,0)))
    }
    function lol()
    {
        holoAng(1,entity():toWorld(ang(0,LOL*5,0)))
        LOL++
        timer(100,1,"lol","lol()")
    }
    
    
    for(I=1,200){
        holoColor(I,vec(255,100,255))
    }
    
    runOnChat(1)
    runOnLast(1)
}
if(chatClk(owner()))
{
    local Msg = owner():lastSaid()
    if ( Msg:sub(1,1)=="." )
    {
        hideChat(1)
        if ( Msg:sub(2)=="open" )
        {
            Mod = -1
            move()
        }elseif(Msg:sub(2)=="close")
        {
            Mod = 1
            move()
        }elseif(Msg:sub(2)=="mat")
        {
            timer(300,200,"mat","mat()")
            
        }elseif(Msg:sub(2)=="selfDestruct")
        {
            fx("sc_shipsplosion_titan",holoEntity(1):pos(),1,ang(),vec(0,0,1),1)
            selfDestruct()
        }elseif(Msg:sub(2)=="toMe")
        {
            toMe()
        }elseif(Msg:sub(2)=="move2")
        {
            Mod=(Mod==1 ? -1 : 1)
            move2()

        }elseif(Msg:sub(2)=="lol")
        {
            lol()
        }
    }
}
if(last())
{
    entity():isWeldedTo():deparent()
}
