@name Planet Defense Cannon

@inputs Fire

@persist Weapons:array [WeaponBase TurretFixed TurretMoving]:entity Go Curtime Ang Acc Target:entity R Pos:vector ShieldE2:entity

if(first())
{
    #include "lib/hob"
    runOnTick(1)
    runOnLast(1)
    
    foreach(K,V:entity=entity():getConstraints())
    {
        if(V:type()=="gmod_wire_expression2")
        {
            if(V:getName():find("ShieldV"))
            {
                ShieldE2 = V
            }
        }
    }
    if(ShieldE2:isValid())
    {
        local WL = ShieldE2:wirelink()
        Pos = WL["PlanetPos",vector]
        R = WL["R",number] * 1.05
    }else{
        Pos = entity():pos()+400
        R = 100
    }
    Core = entity():isWeldedTo()
    findIncludePlayerProps(owner())
    findByClass("sc_weapon_base")
    Weapons = findToArray()
    
    TurretFixed = holoCreate(1)
        holoPos(1,Pos)
        holoAng(1,ang(0))
        holoModel(1,"hqsphere")
        holoColor(1,vec(255,0,0))
        holoParent(1,entity())
    TurretMoving = holoCreate(2)
        holoPos(2,TurretFixed:pos())
        holoAng(2,ang(0))
        holoParent(2,1)
    WeaponBase = holoCreate(3)
        holoPos(3,TurretMoving:toWorld(vec(R,0,0)))
        holoAng(3,TurretMoving:toWorld(ang(90,0,0)))
        holoModel(3,"models/boba_fett/catwalk_build/gate_platform.mdl")
        holoParent(3,2)

    for(I=1,Weapons:count())
    {
        local A = (360/Weapons:count()) * I + 90
        local E = Weapons[I,entity]
        E:setPos(WeaponBase:toWorld(vec(cos(A)*230,sin(A)*230,8)))
        E:setAng(WeaponBase:toWorld(ang(0,-A,0)))
        E:lsLink(Core)
    }
    
    function parent(){for(I=1,Weapons:count()){Weapons[I,entity]:parentTo(WeaponBase)}}
    function go(){Go=1}
    timer(100,1,"parent","parent()")
    timer(200,1,"go","go()")
}
Core:setCapAmount(100000000)
if(Go)
{
    if(!Target:isValid())
    {
        findClearWhiteList()
        findIncludePlayerProps(findPlayerByName("nj"))
        findByClass("ship_core")
        Target=find()
        if( Target:parent():isValid() ) { Target = Target:parent() }
    }
    Curtime = curtime()
    
    local GunPos = WeaponBase:pos()
    local Offset = TurretMoving:toWorld(vec(0,0,-230)) - TurretMoving:pos()
    local TargetPos = Target:pos()
    local Vel = Target:vel()
    local ProjVel = Weapons[1,entity]:getProjectileVel()
    local TarPos = direct_solution(Target:pos(), GunPos, Vel, ProjVel ) + Offset

    local CurAng = TurretMoving:angles()
    local TarAng = (TarPos - TurretFixed:pos()):toAngle()
    local Speed = Weapons[1,entity]:getWeaponSpeed()
    holoAng(2,smoothness(CurAng,TarAng,Speed*$Curtime))
    local B = (Fire? 0.1 : -0.1)
    Acc = clamp(Acc+B,0,8)
    Ang = Ang + Acc
    Ang = Ang%360
    holoAng(3,TurretMoving:toWorld(ang(Ang,90,90)))
    
    local Arc = 360/Weapons:count()
    local CurWep = round(Ang/Arc)
    if(CurWep == 0){ CurWep = 20 }
    local LastWep = CurWep - 1
    if(LastWep == 0){LastWep = 20}
    
    local E = Weapons[CurWep,entity]
    local WL = E:wirelink()
    E:setColor(vec(255,0,0))
    WL["Fire",number] = (Acc==8 ? 1 : 0)
    
    local E = Weapons[LastWep,entity]
    local WL = E:wirelink()
    E:setColor(vec(255,255,255))
    WL["Fire",number] = 0
}

if(last())
{
    for(I=1,Weapons:count())
    {
        local E = Weapons[I,entity]
        E:deparent()
    }
}
