@name EGP Particle Accelerator
@inputs Laser:entity PAcc:entity LaserL:entity PAccL:entity
@outputs 
@persist E:wirelink X Y Z PArray:array
#include "DivNiceNumber"
    interval(500)
if(first()){
    Z=656
    E=entity():isWeldedTo():wirelink()
    E:egpClear()
    
    E:egpBoxOutline(1,vec2(256,256),vec2(256,50))
    E:egpColor(1,vec(255,0,0))
    
    E:egpBox(2,vec2(30,230),vec2(40,20))
    E:egpBox(3,vec2(20,276),vec2(20,40))
    
    E:egpBox(4,vec2(256,230),vec2(20,40))
    E:egpBox(5,vec2(256,276),vec2(40,20))
    
    E:egpBox(6,vec2(100,100),vec2(170,170))
    E:egpColor(6,vec(255,50,50))
    E:egpText(7,"--",vec2(51,29))
    E:egpFont(7,"calibri",250)

    E:egpBox(8,vec2(361,100),vec2(170,170))
    E:egpColor(8,vec(50,255,50))
    E:egpText(9,"++",vec2(20+256,29))
    E:egpFont(9,"calibri",250)
    
    E:egpBox(10,vec2(256,256),vec2(2,2))
    E:egpParentToCursor(10)
    
    function updateText(){
        local Wirelink = PAcc:wirelink()
        local ER = Wirelink["Required Energy",number]
        local AM = Wirelink["Producing Antimatter",number]
        local Hy = Wirelink["Producing Hydrogen",number]
        local Ni = Wirelink["Producing Nitrogen",number]
        local Ox = Wirelink["Producing Oxygen",number]
        E:egpText(12,"        Energy Required: " + nicenumber(ER),vec2(20,300))
        E:egpText(13,"Antimatter Produced: " + nicenumber(AM),vec2(20,320))
        E:egpText(14,"  Hydrogen Produced: " + nicenumber(Hy),vec2(20,340))
        E:egpText(15,"   Nitrogen Produced: " + nicenumber(Ni),vec2(20,360))
        E:egpText(16,"      Oxygen Produced: " + nicenumber(Ox),vec2(20,380))
    }
    timer(1000,0,"updateText","updateText()")
    
    PArray = array( owner(),
                    findPlayerByName("div"),
                    findPlayerByName("kan"),
                    findPlayerByName("mit")
                    )
}
foreach(K,V:entity=PArray){
    if(inrange(E:egpCursor(V),vec2(15,15),vec2(185,185))){
        E:egpColor(6,vec(200,0,0))
        Z--
    }else{
        E:egpColor(6,vec(255,50,50))
    }
    
    if(inrange(E:egpCursor(V),vec2(361-85,100-85),vec2(361+85,361+85))){
        E:egpColor(8,vec(0,200,0))
        Z++
    }else{
        E:egpColor(8,vec(50,255,50))
    }
}
X=PAcc:pos():distance(Laser:pos())/2.4
Y=Z
E:egpBoxOutline(1,vec2(45+(X/2),256),vec2(50+X,50))

E:egpPos(4,vec2(70+X,230))
E:egpPos(5,vec2(70+X,276))
E:egpText(11,""+Z,vec2(43+(X/2),247))
Laser:setPos(PAcc:toWorld(vec(Y,0,0)))
Laser:setAng(PAcc:toWorld(ang(0,90,0)))
PAccL:setPos(PAcc:toWorld(vec(0,30,0)))
PAccL:setAng(PAcc:toWorld(ang(0,-90,0)))
LaserL:setPos(Laser:toWorld(vec(30,0,0)))
LaserL:setAng(Laser:toWorld(ang(0,90,0)))
#[
local count, distance = self:CalculateMultiplier()
    if count == 1 then count = 0.2 end -- penalty for only having one laser node (it should be a circle damnit, at least have 3 entities!)
    self:SetMultiplier( count / 2 * ( distance / 500 ) )
]#
