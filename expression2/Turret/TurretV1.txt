@name TurretV1
@inputs Fire Target:vector
@persist Base:entity Middle:entity Turret:entity Speed Weapons:array WeaponSlots:array LastSlot WaitingForParent:array LastParented AutoClean
@trigger 
@model models/stat_turrets/st_turretbase.mdl

interval(100)

if (chatClk(owner())) {
    if(owner():lastSaid():lower() == "!deparent"){
        hideChat(1)
        #Unparent the weapons
        foreach(K, V:wirelink=Weapons){
            E = V:entity()
            if(E:isValid()){
                E:setAlpha(255)
                E:propNotSolid(0)
                E:deparent()
            }
        }
        print("Weapons Detached!")
    }elseif(owner():lastSaid():lower() == "!weld" && entity():getCoreEnt():isValid()){
        hideChat(1)
        foreach(K, E:wirelink=Weapons){
            E:entity():weld(entity():getCoreEnt())
        }
    }elseif(owner():lastSaid():lower() == "!attach"){
        hideChat(1)
        findClearWhiteList()
        findIncludeClass("sc_weapon*")
        findInSphere(entity():pos(), 150)
        
        foreach(K, E:entity=findToArray()){
            SE = WeaponSlots[LastSlot+1, entity]
            LastSlot = LastSlot + 1
            if(LastSlot > WeaponSlots:count()){LastSlot = 0}
            
            if(SE:isValid()){
                E:freeze()
                E:propNotSolid(1)
                E:setMass(1)              
                E:setPos(SE:boxCenterW()+vec(0,0,20))
                E:setAng(SE:toWorld(ang(0,0,0)))
                WaitingForParent[WaitingForParent:count()+1, entity] = E
            }
        }
        
        timer("PARENT", 100)
    }
}elseif (clk("PARENT")){
    local Looped = 0
    for(I=LastParented+1, WaitingForParent:count()){
        E = WaitingForParent[I, entity]
        E:parentTo(holoEntity(11))
        Weapons[Weapons:count()+1, wirelink] = E:getWirelink()
        WaitingForParent:removeEntity(I)
        Looped = Looped + 1
        if(Looped == 2){
            timer("PARENT", 100)
            break
        }
    }
}elseif (first()|dupefinished()){
    function angle smoothness(CurrentAngle:angle,WantedAngle:angle) {
        local WantedQuat = quat(WantedAngle)
        local CurrentQuat = quat(CurrentAngle)
            
        local LengthQ = abs(rotationAngle(WantedQuat/CurrentQuat))
        local Tick = clamp(Speed/LengthQ,0,1)
        local Quat = slerp(CurrentQuat,WantedQuat,Tick)
            
        return Quat:toAngle()
    }
    
    GunModel = "models/stat_turrets/st_turretmissile.mdl"
    Base=entity()
    Speed = 2 #Literally copy the value from the forums
    AutoClean = 0 #Remove guns when the turret dies
    
    holoCreate(1,Base:boxCenterW()+vec(0,0,(Base:boxSize():z()/2)+0),vec(1,1,1))
    holoModel(1,"models/stat_turrets/st_turretswivel.mdl")
    holoParent(1,Base)
    
    holoCreate(2,Base:boxCenterW()+vec(0,0,(Base:boxSize():z()/2)+30),vec(1,1,1))
    holoColor(2,vec(255,0,0))
    holoPos(2,Base:boxCenterW()+vec(0,0,(Base:boxSize():z()/2)+20))
    holoAlpha(2, 0)
    holoParent(2,1)
    
    holoCreate(3, Base:boxCenterW()+vec(0,0,(Base:boxSize():z()/2)+30))
    holoModel(3, GunModel)
    holoAng(3, ang(0,180,0))
    holoParent(3, 2)
    WeaponSlots[1, entity] = holoEntity(3)
    
    runOnChat(1)
    runOnLast(AutoClean)
}elseif (last() & AutoClean == 1){
    #Remove the guns if the turret is deleted   
    foreach(K, V:wirelink=Weapons){
        V:entity():propDelete()
    }
}

#if(Target:isValid())
#{
    Bearing = (holoEntity(2):boxCenterW() - Target):toAngle()
    TurretBearing = holoEntity(2):angles()
    WantedAngle = smoothness(TurretBearing,Bearing)
    holoAng(1,ang(0,WantedAngle:yaw(),0))
    holoAng(2,holoEntity(1):toWorld(ang(WantedAngle:pitch(),0,0)))
    
    if(~Fire || Fire)
    {
        rangerFilter(Weapons)
        foreach(K, V:wirelink=Weapons){
            local E = V:entity()
            Hitscan = rangerOffset(30000, E:boxCenterW(), E:forward())
            if (!Hitscan:entity():isValid() || Hitscan:entity() == owner() || Hitscan:entity():owner() == owner())
            {
                V["Fire", number] = 0
            }
            else
            {
                V["Fire", number] = Fire
            }
        }
    }
#}
