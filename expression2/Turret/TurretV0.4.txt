@name TurretV0.4
@inputs Target:vector
@outputs 
@persist Base:entity Middle:entity Turret:entity Gun:entity X Speed
@model models/stat_turrets/st_turretswivel.mdl

interval(100)
if(first())
{
    Base=entity()
    Speed=7
    Turret=holoCreate(2,Base:boxCenterW()+vec(0,0,Base:boxSize():z()/2),vec(1,1,1))
    holoModel(2,"models/stat_turrets/st_turretmissile.mdl")
    Middle=holoCreate(1,Base:boxCenterW()+vec(0,0,Base:boxSize():z()/2),vec(1,1,1))
    holoAng(1,Base:angles())
    holoAng(2,Base:angles()+ang(0,180,0))
    holoParent(1,Base)
    holoParent(2,Middle)
    findByClass("sc_weapon_base")
    findIncludePlayerProps(owner())
    Gun=holoCreate(3,findResult(1):pos(),vec(1,1,1))
    holoAng(3,findResult(1):angles())
    findResult(1):parentTo(Gun)
    holoPos(3,Turret:pos()+vec(0,0,35))
    holoAng(3,Turret:angles())
    holoParent(3,Turret)
}

function angle smoothness(CurrentAngle:angle,WantedAngle:angle) {
    local WantedQuat = quat(WantedAngle)
    local CurrentQuat = quat(CurrentAngle)
        
    local LengthQ = abs(rotationAngle(WantedQuat/CurrentQuat))
    local Tick = clamp(Speed/LengthQ,0,1)
    local Quat = slerp(CurrentQuat,WantedQuat,Tick)
        
    return Quat:toAngle()
}

#holoAng(1,Middle:toWorld(ang(0,1,0))) 

holoAng(1,smoothness(Middle:angles(),(Middle:pos()-Target):toAngle()))
 
