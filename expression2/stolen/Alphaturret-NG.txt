@name Alphaturret-NG
@inputs Open Target:vector Turret:entity
@outputs Ent:entity AnimLock AnimMode Out OutB OutC TickRate TickRateB TickRateC HatchPoint [TargAng AimAng VisAng]:angle
@persist 
@trigger 
@model models/props_wasteland/laundry_basket001.mdl

if(first())
{
    runOnTick(1)
    runOnLast(1)
    
    Ent = entity()
    
    holoCreate(2)
    holoPos(2,Ent:toWorld(vec(-24,0,22)))
    holoAng(2,Ent:angles())
    holoAlpha(2,0)
    holoParent(2,Ent)
    #holoEntity(2):setRenderMode(0)
    
    holoCreate(1)
    holoModel(1,"models/hunter/tubes/circle2x2.mdl")
    holoMaterial(1,"models/props_lab/door_klab01")
    holoPos(1,Ent:toWorld(vec(0,0,22)))
    holoAng(1,Ent:angles())
    holoScale(1,vec(0.51))
    holoParent(1,2)
    
    Ticks = 33
    Rate = 0.33*3
    TickRate = Rate/Ticks
    RateB = 70
    TickRateB = RateB/Ticks
    TickRateC = TickRateB
    
    holoCreate(3)
    holoModel(3,"models/hunter/tubes/circle2x2.mdl")
    holoPos(3,Ent:toWorld(vec(0,0,-11)))
    holoAng(3,Ent:angles())
    holoScale(3,vec(0.51))
    holoParent(3,Ent)
    
    holoCreate(4)
    holoModel(4,"models/hunter/tubes/circle2x2.mdl")
    holoPos(4,Ent:toWorld(vec(0,0,-10)))
    holoAng(4,Ent:angles())
    holoScale(4,vec(0.41))
    holoParent(4,3)
    
    holoCreate(5)
    holoModel(5,"models/Slyfo_2/pss_swivelmount.mdl")
    holoPos(5,Ent:toWorld(vec(0,-10,12)))
    holoAng(5,Ent:angles())
    holoScale(5,vec(0.8))
    holoParent(5,4)
    
    holoCreate(6)
    holoModel(6,"models/Slyfo_2/pss_swivelmount.mdl")
    holoPos(6,Ent:toWorld(vec(0,10,12)))
    holoAng(6,Ent:toWorld(ang(0,180,0)))
    holoScale(6,vec(0.8))
    holoParent(6,4)
    
    #models/Slyfo_2/mini_turret_rocketpod.mdl
    
    holoCreate(7)
    holoModel(7,"models/Slyfo_2/mini_turret_rocketpod.mdl")
    holoPos(7,Ent:toWorld(vec(0,0,12)))
    holoAng(7,Ent:toWorld(ang(0,0,0)))
    #holoScale(7,vec(1))
    holoParent(7,4)
    
    Turret:setPos(holoEntity(7):pos())
    Turret:setAng(holoEntity(7):angles())
    Turret:freeze()
    Turret:propNotSolid(1)
    Turret:parentTo(holoEntity(7))
    
}
elseif(tickClk())
{
    A = Open*2
    
    C = 3
    #HatchPoint = (curtime()/C)-round(curtime()/C)
    #holoAng(2,Ent:toWorld(ang(((sin((HatchPoint*90)-45)+1))*-240,0,0)))
    
    #HatchPoint = (round(curtime()/C)-(curtime()/C))+1
    #holoAng(2,Ent:toWorld(ang((((sin((HatchPoint*90)-45)+1))*-240)+240,0,0)))
    
    if(!AnimLock&A != Out)
    {
        if(A)
        {
            AnimMode = 1
        }
        else
        {
            AnimMode = 2
        }
        AnimLock = 1
    }
    
    if(A != Out) 
    {
        Move = sign(A-Out)*TickRate
        Out = Out+Move
        if(vec(A,0,0):distance(vec(Out,0,0)) <= TickRate) 
        {
            Out = A
            AnimLock = 0
        }
        
        if(Out <= 1)
        {
            Out1 = Out
            Out2 = 0
        }
        elseif(Out <= 2)
        {
            Out1 = 1
            Out2 = Out-1
        }
        
        if(AnimMode == 1)
        {
            HatchPoint = Out1-0.5
            holoAng(2,Ent:toWorld(ang(((sin((HatchPoint*90)-45)+1))*-240,0,0)))
        }
        elseif(AnimMode == 2)
        {
            HatchPoint = Out1+0.5
            holoAng(2,Ent:toWorld(ang((((sin((HatchPoint*90)-45)+1))*-240)+240,0,0)))
        }
        
        holoPos(3,Ent:toWorld(vec(0,0,-11+(  (sin((Out2*180)-90)+1)*16.5  ))))
    }
    
    if(A & (Out > 1))
    {
        TargAng = -heading(holoEntity(7):pos(),Ent:angles(),Target)
    }
    else
    {
        TargAng = ang()
    }
    
    B = TargAng:yaw()
    C = TargAng:pitch()
    
    if(B != OutB) 
    {
        Move = sign(B-OutB)*TickRateB
        OutB = OutB+Move
        if(vec(B,0,0):distance(vec(OutB,0,0)) <= TickRateB) 
        {
            OutB = B
        }
        #holoAng(4,Ent:toWorld(ang(0,OutB,0)))
    }
    
    if(C != OutC) 
    {
        Move = sign(C-OutC)*TickRateC
        OutC = OutC+Move
        if(vec(C,0,0):distance(vec(OutC,0,0)) <= TickRateC) 
        {
            OutC = C
        }
        #holoAng(7,holoEntity(4):toWorld(ang(OutC,0,0)))
    }
    
    AimAng = ang(OutC,OutB,0)
    VisAng += (AimAng-VisAng)/6
    holoAng(4,Ent:toWorld(ang(0,VisAng:yaw(),0)))
    holoAng(7,holoEntity(4):toWorld(ang(VisAng:pitch(),0,0)))
}

if(last())
{
    Turret:deparent()
}
