@name Tracking Hud
@inputs  Target:entity
@persist Players:array Cores:array Gyropods:array E2s:array
@persist I C D
#made by razor9511

if(first()){
    EGP=entity():isWeldedTo():getWirelink()
    EGP:egpClear()
    findExcludePlayer(owner())
    findExcludePlayerProps(owner())
    timer("refresh", 1000)
    timer("PosRe",1100)
}

if(clk("refresh")){
    EGP:egpClear()
    
    EGP:egp3DTracker(297, vec(0,0,0))
    EGP:egpBoxOutline(298, vec2(0,0), vec2(15,15))
    EGP:egpColor(298, vec(255,128,0))
    EGP:egpParent(298,297)
    EGP:egpLine(299, vec2(-20,0), vec2(20,0))
    EGP:egpColor(299, vec(0,0,255))
    EGP:egpParent(299,297)
    EGP:egpLine(300, vec2(0,0), vec2(0,20))
    EGP:egpColor(300, vec(0,0,255))
    EGP:egpParent(300,297)
    C=0
    
    findByClass("player")
    Players = findToArray()
    for(I=0,Players:count()){ 
        EGP:egp3DTracker(I,Players[I, entity]:pos())
        EGP:egpTriangleOutline(I+30, vec2(10,0), vec2(-10,-10), vec2(0,10))
        EGP:egpText(I+240, Players[I, entity]:name()+" --- "+Players[I, entity]:health() ,vec2(0,10))
        EGP:egpColor(I+30,vec(255,0,255))
        EGP:egpColor(I+240,vec(255,0,255))
        EGP:egpParent(I+30,I)
        EGP:egpParent(I+240,I)
    }
    
    findByClass("ship_core")
    Cores = findToArray()
    for(I=0,Cores:count()){ 
        EGP:egp3DTracker(I+60,Cores[I, entity]:pos())
        EGP:egpBoxOutline(I+90, vec2(0,0), vec2(10,10))
        EGP:egpColor(I+90,vec(255,0,0))
        EGP:egpParent(I+90,I+60)
    }
    
    findByClass("gyropod_advanced")
    Gyropods = findToArray()
    for(I=0,Gyropods:count()){ 
        EGP:egp3DTracker(I+120,Gyropods[I, entity]:pos())
        EGP:egpPolyOutline(I+150, vec2(5,10), vec2(10,10), vec2(5,10), vec2(0,5), vec2(5,0))
        EGP:egpColor(I+150,vec(0,255,0))
        EGP:egpParent(I+150,I+120)
    }
    
    findByClass("gmod_wire_expression2")
    E2s = findToArray()
    for(I=0,E2s:count()){ 
        EGP:egp3DTracker(I+180,E2s[I, entity]:pos())
        EGP:egpLine(I+210, vec2(0,0), vec2(5,5))
        EGP:egpColor(I+210,vec(255,255,0))
        EGP:egpParent(I+210,I+180)
    }

    timer("refresh", 30000)
}

if(clk("PosRe")){  
    
    EGP:egp3DTracker(297, Target:pos())
    if(Target:type()=="ship_core"){
        if(!C){
            EGP:egpText(280, "Shield: "+round(Target:getShield())+"/"+round(Target:getShieldMax())+" ("+round((Target:getShield()/Target:getShieldMax())*100)+"%)",vec2(0,10))
            EGP:egpText(281, "Armor: "+round(Target:getArmor())+"/"+round(Target:getArmorMax())+" ("+round((Target:getArmor()/Target:getArmorMax())*100)+"%)",vec2(0,20))
            EGP:egpText(282, "Hull: "+round(Target:getHull())+"/"+round(Target:getHullMax())+" ("+round((Target:getHull()/Target:getHullMax())*100)+"%)",vec2(0,30))
            EGP:egpText(283, "Cap: "+round(Target:getCap())+"/"+round(Target:getCapMax())+" ("+round((Target:getCap()/Target:getCapMax())*100)+"%)",vec2(0,40))
            EGP:egpColor(280,vec(255,0,0))
            EGP:egpColor(281,vec(255,0,0))
            EGP:egpColor(282,vec(255,0,0))
            EGP:egpColor(283,vec(255,0,0))
            EGP:egpParent(280,297)
            EGP:egpParent(281,297)
            EGP:egpParent(282,297)
            EGP:egpParent(283,297)
            
            C=1
            D=1
        }
        EGP:egpSetText(280, "Shield: "+round(Target:getShield())+"/"+round(Target:getShieldMax())+" ("+round((Target:getShield()/Target:getShieldMax())*100)+"%)")
        EGP:egpSetText(281, "Armor: "+round(Target:getArmor())+"/"+round(Target:getArmorMax())+" ("+round((Target:getArmor()/Target:getArmorMax())*100)+"%)")
        EGP:egpSetText(282, "Hull: "+round(Target:getHull())+"/"+round(Target:getHullMax())+" ("+round((Target:getHull()/Target:getHullMax())*100)+"%)")
        EGP:egpSetText(283, "Cap: "+round(Target:getCap())+"/"+round(Target:getCapMax())+" ("+round((Target:getCap()/Target:getCapMax())*100)+"%)")
    }elseif(D==1){
        EGP:egpRemove(280)
        EGP:egpRemove(281)
        EGP:egpRemove(282)
        EGP:egpRemove(283)
        
        C=0
        D=0
    }
    
    for(I=0,Players:count())
    {
        EGP:egp3DTracker(I,Players[I, entity]:pos())
        EGP:egpSetText(I+240, Players[I, entity]:name()+" --- "+Players[I, entity]:health())
    }
    
    for(I=0,Cores:count())
    {
        EGP:egp3DTracker(I+60,Cores[I, entity]:pos())
    }
    
    for(I=0,Gyropods:count())
    {
        EGP:egp3DTracker(I+120,Gyropods[I, entity]:pos())
    }
    
    for(I=0,E2s:count())
    {
        EGP:egp3DTracker(I+180,E2s[I, entity]:pos())
    }
    
    timer("PosRe",500)
}

