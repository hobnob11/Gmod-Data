@name Object Orientated Programming
@autoupdate
@persist
print(_HUD_PRINTCONSOLE,"Hob-OS: [OOP] Loaded")

# Class:getClass() - returns class name
function string table:getClass()
{
    return This["Class",string]
}

# Class:getSuper() - returns this class's parent class (or nil if not extended)
function table table:getSuper()
{
    return This["Super",table]
}

#to be able to do extension, we need to be able to reference the baseclass, to get the base class we need somewhere global to access it. 
#since included files have no concept of persisted vars from the parent e2, we need to store them in a global table. 
#since GT's are global to ALL e2's, we need to make a gt per e2. 

# registerClass( Class ) - Internal Function, Adds A Class to the global class table, should only be used internally 
function registerClass( Class:table )
{
    local GT = gTable(entity():id()+"GLOBAL_CLASS_TABLE")
    GT[Class:getClass(), table] = Class
}

# retreiveClass( ClassName ) - returns the Class of given name. 
function table retreiveClass( ClassName:string )
{
    local GT = gTable(entity():id()+"GLOBAL_CLASS_TABLE")
    return GT[ ClassName, table]
}

# public_class( ClassName ) - Makes a new Class with given name
function table public_class( ClassName:string )
{
    local This = table( "Class" = ClassName )
    registerClass( This )
    return This
}

# extends( BaseClass ) - returns the new Class, takes the name of the class it inherets from
function table table:extends(BaseClass:string)
{
    local Super = retreiveClass( BaseClass )
    This[ "Super", table] = Super
    Super[ "Children", table][ This:getClass(), table] = This
    registerClass( This )
    return This
}


