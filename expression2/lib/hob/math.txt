@name Math Library
@autoupdate
print(_HUD_PRINTCONSOLE,"Hob-OS: [Math] Loaded")

#returns an array of vectors representing the verticies of a sphere.
function void array:sphere(R,Devisions,OnFinish:string,Theta)
{
    if(!This:count()) {
        This:pushVector(vec(0,0,-R))
        Theta = pi() - pi() / Devisions
    }
    while( Theta > 0 && perf(70) ) # Elevation pi - 0
    {
        local Phi = 0 
        while( Phi < 2*pi() ) # Azimuth 0 - 2pi
        {
            local X = R * cosr(Phi) * sinr(Theta)
            local Y = R * sinr(Phi) * sinr(Theta)
            local Z = R             * cosr(Theta)
            This:pushVector(vec(X,Y,Z))
            Phi = Phi + pi()/Devisions 
        }
        Theta = Theta - pi()/Devisions
    }
    if(Theta > 0) {
        timer(10,1,"SphereContinue","sphere(r:nnsn)",This,R,Devisions,OnFinish,Theta)
    }
    else{
        This:pushVector(vec(0,0,R))
        timer(100,1,"SphereFinish",OnFinish + "(r)", This)
    }
}

#a sphere so retarded it may work
function array icosphere(R,Devisions)
{
    local Ret = array()
    for(I=1,Devisions)
    {
        local A = (360/Devisions)*I
        local X = 0
        local Y = cos(A) * R
        local Z = sin(A) * R
        Ret:pushVector(vec(X,Y,Z))
    }
    return Ret
}
######DIV TECH ANGLE MATH#####
    function angle smoothness(CurrentAngle:angle,WantedAngle:angle,Speed) {
        local WantedQuat = quat(WantedAngle)
        local CurrentQuat = quat(CurrentAngle)
        
        local LengthQ = abs(rotationAngle(WantedQuat/CurrentQuat))
        local Tick = clamp(Speed/LengthQ,0,1)
        local Quat = slerp(CurrentQuat,WantedQuat,Tick)
        
        return Quat:toAngle()
    }
    function number ang(V1:vector,V2:vector) {
        local Ret = acos(V1:dot(V2))
        if (Ret == Ret) {
            return Ret
        } else {
            return 0
        }
    }
    function angle smoothness2(Current:vector,Wanted:vector,Speed) {
        local CurAng = ang(Current,Wanted)
        local CurSpeed = clamp(Speed / CurAng,0,1)
        return mix(Wanted,Current,CurSpeed):toAngle()
    }
    
##hob tech velocity prediction
function number first_positive_solution_of_quadratic_equation(A, B, C)
{
    local Discriminant = B*B - 4 * A * C
    if( Discriminant < 0 )
    {
        return -1 #this means there isnt one
    }
    local S = sqrt(Discriminant)
    local X1 = (-B-S) / (2*A)
    if(X1 > 0)
    {
        return X1
    }
    local X2 = (-B+S) / (2*A)
    if(X2 > 0)
    {
        return X2
    }
    return -1 #we failed
}

function vector direct_solution( TargetPos:vector, TargetVel:vector, ProjectileSpeed )
{
    local A = TargetVel:dot(TargetVel) - ProjectileSpeed * ProjectileSpeed
    local B = 2 * TargetPos:dot(TargetVel)
    local C = TargetPos:dot(TargetPos)
    
    local T = first_positive_solution_of_quadratic_equation(A, B, C)
    if( T <= 0 )
    {
        return TargetPos #we failed D:
    }
    return TargetPos + T * TargetVel
}

function vector array:averageVector()
{
    local Total = vec()
    for(I=1,This:count())
    {
        Total = Total + This[I,vector]
    }
    return Total / This:count()
}  

function void entity:applyQTorque( TargetAngle:angle, Number1, Number2 )
{
    local TarQ = quat( TargetAngle ) #Calculate quaternion for target orientation
    local CurQ = quat( This ) #Calculate current orientation quaternion
     
    #TarQ/CurQ is a quaternion representing the rotation that will rotate the object from current orientation to the target one.
    local Q = TarQ/CurQ
     
    #applyTorque() works on intrinsic vectors! Get the rotation vector and transform it.
    local V = This:toLocal( rotationVector( Q ) + This:pos() )
    #Alternatively, can use "V = transpose(matrix(E))*rotationVector(Q)"
    
    #Apply torque. angVelVector() works like a delta term.
    #Factors 100 and 12 can be adjusted to achieve best effect.
    local Torque = (Number1*V - Number2*This:angVelVector())*This:inertia()
    #dynamic clamp:
    Torque = clamp(Torque, -vec(2^31), vec(2^31))
    This:applyTorque( Torque )
}

function string nicenumber(N) {
    N = abs(N)
    local Googol = round(N/(10^100),2)
    if (floor(Googol) > 0) {return Googol + "ggl"}
    N = N % (10^100)
    
    local Septillion = round(N/1000000000000000000000000,2)
    if (floor(Septillion) > 0) {return Septillion + "sep"}
    N = N % 1000000000000000000000000
    
    local Billion = round(N/1000000000,2)
    if (floor(Billion) > 0) {return Billion + "B"}
    N = N % 1000000000
    
    local Million = round(N/1000000,1)
    if (floor(Million) > 0) {return Million + "M"}
    N = N % 1000000
    
    local HundredK = round(N/100000,1)*100
    if (floor(HundredK) > 0) {return HundredK + "K"}
    N = N % 100000
    
    local Thousand = round(N/1000,1)
    if (floor(Thousand) > 0) {return Thousand + "K"}
    N = N % 1000
    
    return ""+round(N,2)
}

function string nicetime(N) {
    local Weeks = floor(N/604800)
    if (Weeks > 0) {N = N % 604800}
    
    local Days = floor(N/86400)
    if (Days > 0) {N = N % 86400}
    
    local Hours = floor(N/3600)
    if (Hours > 0) {N = N % 3600}
    
    local Minutes = floor(N/60)
    if (Minutes > 0) {N = N % 60}
    
    if (Weeks > 0) {
        return Weeks + "w " + Days + "d"
    } elseif (Days > 0) {
        return Days + "d " + Hours + "h "
    } elseif (Hours > 0) {
        return Hours + "h " + Minutes + "m "
    } elseif (Minutes > 0) {
        return Minutes + "m " + floor(N) + "s"
    } else {
        return floor(N)+"s"
    }
}
