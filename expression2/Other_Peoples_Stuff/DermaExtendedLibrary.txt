@name DermaExtendedLibrary
@inputs 
@outputs 
@persist DermaData:table Print:string
@trigger 

#This is just an #include'able E2 to hold some functions I'd like to use form my derma shiz

if(first()|dupefinished()) {
    ##Generic Functions##
    function table array:toTable_(Type:string) {
        #Valid types are: number normal string
        local Return = table()
        switch (Type:lower()) {
                case "number",
                    for(I=1,This:count()) {
                        Return:pushNumber(This[I,number])
                    }
                    break
                case "normal",
                    for(I=1,This:count()) {
                        Return:pushNumber(This[I,number])
                    }
                    break
                case "string",
                    for(I=1,This:count()) {
                        Return:pushString(This[I,string])
                    }
                    break
                case "entity",
                    for(I=1,This:count()) {
                        Return:pushEntity(This[I,entity])
                    }
                    break
                case "vector",
                    for(I=1,This:count()) {
                        Return:pushVector(This[I,vector])
                    }
                    break
                case "vector2",
                    for(I=1,This:count()) {
                        Return:pushVector2(This[I,vector2])
                    }
                    break
                case "vector4",
                    for(I=1,This:count()) {
                        Return:pushVector4(This[I,vector4])
                    }
                    break
                case "angle",
                    for(I=1,This:count()) {
                        Return:pushAngle(This[I,angle])
                    }
                    break
                case "wirelink",
                    for(I=1,This:count()) {
                        Return:pushWirelink(This[I,wirelink])
                    }
                    break
        }
        return Return
    }
    
    function array table:toArray_(Type:string) {
        #Valid types are: number normal string
        local Return = array()
        switch (Type:lower()) {
                case "number",
                    for(I=1,This:count()) {
                        Return:pushNumber(This[I,number])
                    }
                    break
                case "normal",
                    for(I=1,This:count()) {
                        Return:pushNumber(This[I,number])
                    }
                    break
                case "string",
                    for(I=1,This:count()) {
                        Return:pushString(This[I,string])
                    }
                    break
                case "entity",
                    for(I=1,This:count()) {
                        Return:pushEntity(This[I,entity])
                    }
                    break
                case "vector",
                    for(I=1,This:count()) {
                        Return:pushVector(This[I,vector])
                    }
                    break
                case "vector2",
                    for(I=1,This:count()) {
                        Return:pushVector2(This[I,vector2])
                    }
                    break
                case "vector4",
                    for(I=1,This:count()) {
                        Return:pushVector4(This[I,vector4])
                    }
                    break
                case "angle",
                    for(I=1,This:count()) {
                        Return:pushAngle(This[I,angle])
                    }
                    break
                case "wirelink",
                    for(I=1,This:count()) {
                        Return:pushWirelink(This[I,wirelink])
                    }
                    break
        }
        return Return
    }
    
    #Derma Functions#
    #I feel like the default functions are a bit lacking, so I'm making some custom shiz
    
    DermaData = table()
    DermaData["roots",array] = array()
    
    ##Returning Functions##
    #What was really missing from the default Derma (At least relative to EGP)
    
    function void dESubHeir(Table:table) {
        for(I=1,Table:count()) {
            local C = DermaData[Table[I,string],table]
            Print = Print + C["name",string] + "<" + C["type",string] + ">"
            if(C:exists("children") && (C["children",array]:count() != 0)) {Print = Print + "{" dESubHeir(C["children",array]:toTable_("string"))}
        }
        Print = Print + "}"
    }
    
    function void dEPrintHierarchy() {
        Roots = DermaData["roots",array]
        Print = "{"
        dESubHeir(Roots:toTable_("string"))
        print(Print)
    }
    
    function vector2 dEGetPos(Name:string) {
        return DermaData[Name,table]["pos",vector2]
    }
    
    function vector2 dEGetSize(Name:string) {
        return DermaData[Name,table]["size",vector2]
    }
    
    function number dEGetLength(Name:string) {
        return DermaData[Name,table]["size",number]
    }
    
    function number dEGetMin(Name:string) {
        return DermaData[Name,table]["min",number]
    }
    
    function number dEGetMax(Name:string) {
        return DermaData[Name,table]["max",number]
    }
    
    function string dEGetText(Name:string) {
        Ret = DermaData[Name,table]["text",string]
        return (Ret != "") ? Ret : Name
    }
    
    function vector4 dEGetColor(Name:string) {
        return DermaData[Name,table]["color",vector4]
    }
    
    function string dEGetType(Name:string) {
        return DermaData[Name,table]["type",string]
    }
    
    function array dEGetChildren(Name:string) {
        return DermaData[Name,table]["children",array]
    }
    
    function array dEGetRoots() {
        return DermaData["roots",array]
    }
    
    ##Modifying Functions##
    #Again, largely unchanged#
    
    function void dEPos(Name:string, Pos:vector2) {
        dPos(Name,Pos)
        DermaData[Name,table]["pos",vector2] = Pos
    }
    
    function void dEPos(Name:string, Pos:vector2, B) {
        if(dEGetType(Name) != "frame") {dPos(Name,Pos)}
        local OPos = DermaData[Name,table]["pos",vector2]
        DermaData[Name,table]["pos",vector2] = Pos
        local Children = DermaData[Name,table]["children",array]
        for(I=1,Children:count()) {
            local ChildS = Children[I,string]
            local CPos = dEGetPos(ChildS)
            local Diff = (Pos - OPos)
            local CDiff = (CPos-OPos)
            local NMov = Diff
            local NPos = CPos + NMov
            #print("Before Move: " + dEGetPos(ChildS):toString())
            #print("Parent moved from " + OPos:toString() + " to " + Pos:toString() + ", moving by " + Diff:toString() + ". Child is " + CDiff:toString() +  " away at " +
                #CPos:toString() + ", so it has to move " + NMov:toString() + ". ")
            dEPos(ChildS,NPos,1)
            #print("After Move: " + dEGetPos(ChildS):toString())
        }
    }
    
    function void dESize(Name:string, Size:vector2) {
        dSize(Name,Size)
        DermaData[Name,table]["size",vector2] = Size
    }
    
    function void dEText(Name:string, Text:string) {
        dText(Name,Text)
        DermaData[Name,table]["text",string] = Text
    }
    
    function void dEShow(Name:string, Show:number) {
        if(DermaData[Name,table]["type",string]=="panel") {
            dShow(Name,Show)
            DermaData[Name,table]["show",number] = Show
        }
        else{print("[ERROR][ILLEGAL OPERATION] Cannont perform dEShow on " + Name + " as is not a panel")}
    }
    
    function void dEColor(Name:string, R, G, B, A) {
        dColor(Name,R,G,B,A)
        DermaData[Name,table]["color",vector4] = vec4(R,G,B,A)
    }
    
    function void dEColor(Name:string,Color:vector4) {
        dEColor(Name, Color:x(), Color:y(), Color:z(), Color:w())
    }
    
    function void dEColor(Name:string,Color:vector,Alpha) {
        dEColor(Name, Color:x(), Color:y(), Color:z(), Alpha)
    }
    
    function void dELength(Name:string,Length) {
        dLength(Name,Length)
        DermaData[Name,table]["size",number] = Length
    }
    
    function void dEArray(Name:string, Array:array) {
        dArray(Name,Array)
        DermaData[Name,table]["array",array] = Array
    }
    
    function void dEMakeChildOf(Name:string, Parent:string) {
        DermaData[Name,table]["fparent",string] = Parent
        DermaData[Parent,table]["children",array]:pushString(Name)
    }
    
    function void dEMakeChildrenOf(Array:array, Parent:string) {
        for(I=1,Array:count()) {
            dEMakeChildOf(Array[I,string],Parent)
        }
    }
    
    
    ##Creation Functions##
    #Largely unchanged, except that they add all of their data to a table
    function void dEPanel(Name:string,Pos:vector2,Size:vector2) {
        dPanel(Name,Pos,Size)
        ObjectData = table()
        ObjectData["name",string] = Name
        ObjectData["pos",vector2] = Pos
        ObjectData["size",vector2] = Size
        ObjectData["type",string] = "panel"
        ObjectData["children",array] = array()
        DermaData[Name,table] = ObjectData
        DermaData["roots",array]:pushString(Name)
    }
    
    function void dEButton(Name:string,Parent:string,Pos:vector2,Size:vector2) {
        dButton(Name,Parent,Pos,Size)
        ObjectData = table()
        ObjectData["name",string] = Name
        ObjectData["pos",vector2] = Pos
        ObjectData["size",vector2] = Size
        ObjectData["parent",string] = Parent
        ObjectData["type",string] = "button"
        DermaData[Name,table] = ObjectData
        DermaData[Parent,table]["children",array]:pushString(Name)
        dRunOnChange(Name,1)
    }
    
    function void dEButton(Name:string,Parent:string,Pos:vector2,Size:vector2,Text:string) {
        dEButton(Name,Parent,Pos,Size)
        dEText(Name,Text)
    }
    
    function void dECheckBox(Name:string,Parent:string,Pos:vector2) {
        dCheckBox(Name,Parent,Pos)
        ObjectData = table()
        ObjectData["name",string] = Name
        ObjectData["pos",vector2] = Pos
        ObjectData["parent",string] = Parent
        ObjectData["type",string] = "checkbox"
        DermaData[Name,table] = ObjectData
        DermaData[Parent,table]["children",array]:pushString(Name)
        dRunOnChange(Name,1)
    }
    
    function void dECheckBox(Name:string,Parent:string,Pos:vector2,Text:string) {
        dECheckBox(Name,Parent,Pos)
        dEText(Name,Text)
    }
    
    function void dESlider(Name:string,Parent:string,Pos:vector2,Length,Min,Max) {
        dSlider(Name,Parent,Pos,Length,Min,Max)
        ObjectData = table()
        ObjectData["name",string] = Name
        ObjectData["pos",vector2] = Pos
        ObjectData["size",number] = Length
        ObjectData["min",number] = Min
        ObjectData["max",number] = Max
        ObjectData["parent",string] = Parent
        ObjectData["type",string] = "slider"
        DermaData[Name,table] = ObjectData
        DermaData[Parent,table]["children",array]:pushString(Name)
        dRunOnChange(Name,1)
    }
    
    function void dESlider(Name:string,Parent:string,Pos:vector2,Length,Min,Max,Text:string) {
        dESlider(Name,Parent,Pos,Length,Min,Max)
        dEText(Name,Text)
    }
    
    function void dETextBox(Name:string,Parent:string,Pos:vector2,Length) {
        dTextBox(Name,Parent,Pos,Length)
        ObjectData = table()
        ObjectData["name",string] = Name
        ObjectData["pos",vector2] = Pos
        ObjectData["size",number] = Length
        ObjectData["parent",string] = Parent
        ObjectData["type",string] = "textbox"
        DermaData[Name,table] = ObjectData
        DermaData[Parent,table]["children",array]:pushString(Name)
        dRunOnChange(Name,1)
    }
    
    function void dETextBox(Name:string,Parent:string,Pos:vector2,Length,Text:string) {
        dETextBox(Name,Parent,Pos,Length)
        dEText(Name,Text)
    }
    
    function void dEImage(Name:string,Parent:string,Image:string,Pos:vector2,Size:vector2) {
    #I don't even know how to use the default function >.<
        dImage(Name,Parent,Image,Pos,Size)
        ObjectData = table()
        ObjectData["name",string] = Name
        ObjectData["pos",vector2] = Pos
        ObjectData["size",vector2] = Size
        ObjectData["image",string] = Image
        ObjectData["parent",string] = Parent
        ObjectData["type",string] = "image"
        DermaData[Name,table] = ObjectData
        DermaData[Parent,table]["children",array]:pushString(Name)
    }
    
#[    function void dEDropBox(Name:string,Parent:string,Pos:vector2,Length) {
        #Just in case the function is fixed
        dDropBox(Name,Parent,Pos,Length)
        ObjectData = table()
        ObjectData["name",string] = Name
        ObjectData["pos",vector2] = Pos
        ObjectData["length",number] = Length
        ObjectData["parent",string] = Parent
        ObjectData["type",string] = "dropbox"
        DermaData[Name,table] = ObjectData
        DermaData[Parent,table]["children",array]:pushString(Name)
    }                                                                              ]#
    
    function void dELabel(Name:string,Parent:string,Pos:vector2) {
        dLabel(Name,Parent,Pos)
        ObjectData = table()
        ObjectData["name",string] = Name
        ObjectData["pos",vector2] = Pos
        ObjectData["parent",string] = Parent
        ObjectData["type",string] = "label"
        DermaData[Name,table] = ObjectData
        DermaData[Parent,table]["children",array]:pushString(Name)
    }
    
    function void dELabel(Name:string,Parent:string,Pos:vector2,Text:string) {
        dELabel(Name,Parent,Pos)
        dEText(Name,Text)
    }
    
    function void dETabHolder(Name:string,Parent:string,Pos:vector2,Size:vector2) {
        dTabHolder(Name,Parent,Pos,Size)
        ObjectData = table()
        ObjectData["name",string] = Name
        ObjectData["pos",vector2] = Pos
        ObjectData["size",vector2] = Size
        ObjectData["parent",string] = Parent
        ObjectData["type",string] = "tabholder"
        ObjectData["children",array] = array()
        DermaData[Name,table] = ObjectData
        DermaData[Parent,table]["children",array]:pushString(Name)
    }
    
    function void dETab(Name:string,Parent:string) {
        dTab(Name,Parent)
        ObjectData = table()
        ObjectData["name",string] = Name
        ObjectData["parent",string] = Parent
        ObjectData["type",string] = "tab"
        ObjectData["children",array] = array()
        DermaData[Name,table] = ObjectData
        DermaData[Parent,table]["children",array]:pushString(Name)
        dRunOnChange(Name,1)
    }
    
    function void dETab(Name:string,Parent:string,Text:string) {
        dETab(Name,Parent)
        dEText(Name,Text)
    }
    
    function void dEListBox(Name:string,Parent:string,Pos:vector2,Size:vector2) {
        dListBox(Name,Parent,Pos,Size)
        ObjectData = table()
        ObjectData["name",string] = Name
        ObjectData["pos",vector2] = Pos
        ObjectData["size",vector2] = Size
        ObjectData["parent",string] = Parent
        ObjectData["type",string] = "listbox"
        DermaData[Name,table] = ObjectData
        DermaData[Parent,table]["children",array]:pushString(Name)
        dRunOnChange(Name,1)
    }
    
    function void dEListBox(Name:string,Parent:string,Pos:vector2,Size:vector2,Array:array) {
        dEListBox(Name,Parent,Pos,Size)
        dEArray(Name,Array)
    }
    
    function void dEListBox(Name:string,Parent:string,Pos:vector2,Size:vector2,Text:string) {
        dEListBox(Name,Parent,Pos,Size)
        dEText(Name,Text)
    }
    
    function void dEListBox(Name:string,Parent:string,Pos:vector2,Size:vector2,Text:string,Array:array) {
        dEListBox(Name,Parent,Pos,Size,Array)
        dEText(Name,Text)
    }
    
    function void dEFrame(Name:string,Parent:string,Pos:vector2) {
        ObjectData = table()
        ObjectData["name",string] = Name
        ObjectData["pos",vector2] = Pos
        ObjectData["parent",string] = Parent
        ObjectData["type",string] = "frame"
        ObjectData["children",array] = array()
        DermaData[Name,table] = ObjectData
        DermaData[Parent,table]["children",array]:pushString(Name)
    }
    
    function void dEFrame(Name:string,Parent:string,Pos:vector2,Children:array) {
        dEFrame(Name,Parent,Pos)
        dEMakeChildrenOf(Children,Name)
    }
    
    function void dEFrame(Name:string,Parent:string,Pos:vector2,Children) {
        dEFrame(Name,Parent,Pos)
        local ToAdd = array()
        ParentChildren = DermaData[Parent,table]["children",array]
        for(I=1,Children) {
            ToAdd:pushString(ParentChildren[ParentChildren:count()-I,string])
        }
        dEMakeChildrenOf(ToAdd,Name)
        
    }
    
    
    
}
